# 2.1.0

**Breaking Changes**

- Unity: Editor code has been refactored and, to simplify future updates, some files have been merged. That means that any changes made to the editor code will need to be reapplied, if necessary. That said, extending inspector and handling Quantum attributes is *much* simpler now and can be done with PropertyDrawers (check LayerAttributeDrawer or RangeAttributeDrawer).
- Unity: Quantum scripts are now contained in `PhotonQuantum` and `PhotonQuantumEditor` assemblies using Assembly Definitions. This allows you to use Quantum in custom and test assemblies, but forces a different approach when it comes to extending Quantum itself: all partial classes need to be a part of `PhotonQuantum` assembly, types from global assembly can't be used and `Assembly Definitions References` list needs to be updated to access types defined in other assemblies. If the transition proves problematic, removing `PhotonQuantum.asdef` and `PhotonQuantumEditor.asmdef` will make Quantum global again. Note that the new assemblies have a missing reference to `PhotonQuantumCode` - this is a placeholder in case you go for full code integration (explained later on) and should not cause any issues.
- Unity: Changed generated Editor scripts location to `quantum_unity/Assets/Photon/Quantum/Editor/Generated`. Old scripts (located in `quantum_unity/Assets/Photon/Quantum/Generated`) need to be removed by hand.
- Unity: `QuantumInstantReplay` has been reworked and simplified. If your code depends on the old implementation, use `Quantum.Legacy.QuantumInstantReplay` instead.
- Unity: `Map` and `NavMesh` assets no longer create extra binary files to be loaded with `IFileLoader`. They use `BinaryData` assets instead. Rebake all your maps with `Quantum/All Scenes` or `Quantum/All Enabled Scenes`. Old binary files will be removed in the process.
- Unity: Removed `QuantumEvent`/`QuantumCallback.Subscribe` parameter `excludeGameMode`. Use `gameMode` and `exclude` parameters instead.
- `AssignEntityRefs` prototype materialization phase has been removed. `EntityRef` fields are now resolved during the `Materialize` stage. This means that any changes to `EntityRef` fields performed in `ISignalOnComponentAdded` signal or in `MaterializeUser` partial method will no longer be overwritten. Remember that just like before, in case of map prototypes querying other entities' components is only safe after all prototypes have been materialized (`ISignalOnEntityPrototypeMaterialized`).
- DrawIfAttribute now uses enum value instead of enum index, if it points to an enum property.
- The navmesh binary data format has changed (pre-calculation of triangle normals for projection): Re-bake all your navmeshes.
- The navmesh binary data file has been converted into a Quantum asset (`BinaryDataAsset`): Relink the new asset files in your debug `MapNavMeshDebugDrawer` instances (if you have any) and remove any leftover navmesh .bytes files from your project.
- Removed the pathfinder radius feature: Different agent radii are nice but they were taking a lot of extra effort and in the end caused more trouble than we saw potential gain. It is still possible to achieve a similar effect by creating different navmeshes for different radii. This is also a much cleaner solution as it closes paths for bigger agents entirely, which was not possible with the radius feature before. Caveat: the avoidance radius needs to be set explicitly now because it does not have the Radius parameter to fall back to: Consider noting down the Radius values in this case before the upgrade or retrieve from a source control diff afterwards.
- Navigation agents that are starting off the navmesh (due to a disabled region for example) are teleported to a valid (closest) position inside the navmesh when they begin their path. Previously they were trying to get out of the non-navmesh zone gracefully, but that was not possible all the time.
- Some Navigation API changes will result in compilation errors and unfortunately need to be fixed by hand while other API changes are marked in code by the `Obsolete` attribute.
- The new Realtime version restricts access to the auth token. As a guideline reconnecting after losing the connection object should always pass through the nameserver again.
- The `SessionContainer` class has been refactored and will show `obsolete` warnings. Use the class from the `Quantum.Legacy` namespace if you are unable to adapt the changes. This change also reflects in the custom server plugin package, checkout the newest version to see how to set up the session container.
- We upgraded Photon Realtime used by the client to version 4.1.5.1. The new Realtime version restricts access to the auth token. As a guideline reconnecting after losing the connection object should always pass through the nameserver again.
- We upgraded the `PhotonHivePlugin.dll` used by the Quantum plugin to version 1.1.0.24499. For Quantum Cloud customers nothing changes but Enterprise customers that want to run this new version need to upgrade their private cloud to Photon Server v5 RC1 (https://doc.photonengine.com/en-us/server/current/plugins/plugins-whats-new#plugins_api_version_upgrade).

```csharp
NavMeshPathfinder {
    // OLD
    public FPVector2 Target
    public FPVector2 InternalTarget
    public FPVector2 GetWaypoint(FrameBase f, int index) { }
    public void SetTarget(FrameBase f, FPVector2 target, NavMesh navMesh) { }
    // NEW
    public FPVector3 Target
    public FPVector3 InternalTarget
    public FPVector3 GetWaypoint(FrameBase f, int index) { }
    public void SetTarget(FrameBase f, FPVector3 target, NavMesh navMesh) { }
}
```

`OnNavMeshWaypointReached` changed the waypoint parameter type from `FPVector2` to `FPVector3` inside the callback signature

**What's New**

- Shape Casts (Regular and Broadphase Queries)
- Inertia Tensors for 3D Physics Bodies
- New Collision Solvers: improved performance and parallelism
- Physics Colliders now have an `Enabled` property, so that disabling a collider does not need to incur in removing the component anymore.
- We added proper 3D support for NavMeshes: When using a Transform3D component the navmesh agents will be able to fully move inside the 3D navigation mesh under and over bridges for example. The input target position is passed in 3D and will be projected onto the closest navmesh triangle vertically-wise.
The navigation agent will move on the navmesh by default. But for better visual results there should be static Quantum colliders that the agent can use to vertically position itself on. The heightmap, which is generated alongside the Unity navmesh, can **not** be utilized (access is not exposed).
- Room spectating support: the simulation can be joined with 0 local players to implement spectating clients that cannot influence the simulation
- Quantum Asset Database can optionally be baked into quantum.code.dll to simplify custom server deployment. Export the AssetDB from Unity to `quantum_code/quantum.code/db.json`. The custom plugin project will prioritize loading from disk first and upon failing to find the db file will try to load internal one.
- The multi client test runner similar to the DebugRunner can load multiple online clients into a scene controlled by one Unity Editor (`QuantumMutliClientRunner`)
- Dynamic assets can now be searched by a path. Variants of `Frame`/`FrameThreadSafe.FindAsset` accepting a path now have an additional parameter: `DatabaseType`. Dynamic asset's path needs to be unique only among other dynamic assets.
- Unity: Quantum State Inspector has been completely reworked. The look & feel is now much closer to Unity Hierarchy and Inspector windows. In addition to entities and globals you can now inspect session settings and dynamic assets. Entities and components can now be added and removed from within the inspector, provided `quantum.code` has been built in `Debug` mode.
- Native Strings `QString<N>` and `QStringUtf8<N>` DSL types with `N` being the total size in bytes minus 2 bytes used for bookkeeping, e.g. `QString<64>` will use 64 bytes for a string with a max byte length of 62 bytes (up to 31 UTF-16 characters)
- DSL: `client` & `server` event keywords added. Events marked with `client` are culled immediately when simulation is running as a server plug-in. Marking with `server` has the opposite effect.
- DSL: `FreeOnComponentRemoved` attribute: a way to auto-free lists and dictionaries. Decorating a field with it will emit clean up code that gets ivoked when component gets removed, after `ISignalOnComponentRemoved`. If used on a struct's field, then the code will be emit and invoked for all components that use the struct.
- `Frame`/`FrameThreadBase.TryFindAsset` - a way to look for an optional asset without polluting output logs with missing assets errors
- `quantum.code` project source files can now be entirely moved to the Unity project. Read `tools/codeintegration_unity/README.md` for details.
- `BinaryData`: an asset hosting binary data with a support for lazy decompression.
- Math: `FPMath.SinCos` (much faster than calling `FPMath.Sin` and then `FPMath.Cos`).
- Math: Logarithms (`FPMath.Log2`, `FPMath.Log10`, `FPMath.Ln`, `FPMath.Log`, `FPMath.Log2FloorToInt` and `FPMath.Log2CeilingToInt`).
- Prototypes: Inspector support for dictionaries.
- `AssetGuid.TryParse`
- `EntityRef.TryParse`
- `RNGSession.NextInclusive` and `RNGSession.Peek`.
- `FrameContextUser.ConstructUser` and `FrameContextUser.DisposeUser` partial methods.
- `Frame.Serialize` overload that takes an external byte array to avoid majority of internal allocs
- `DeterministicSession.MaxVerifiedTicksPerUpdate` - a way to limit how many verified simulations are allowed to happen in a single `Update`.
- `JsonAssetSerializerBase`, `QuantumJsonSerializer` and `QuantumUnityJsonSerializer` auto-compression of `BinaryData` (`CompressBinaryDataOnSerializationThreshold` and `DecompressBinaryDataOnDeserialization` properties)
- Unity: `BinaryDataAsset`: a wrapper for BinaryData assets. Supports compression and can point to a TextAsset as their data source.
- Unity: `QuantumMapDataBakeFlags`: `BakeMapPrototypes` and `BakeMapColliders` flags can be used to enable/disable baking of prototypes/colliders to speed up the auto-bake process.
- Unity: `QuantumEvent/Callback`: an optional `DispatchableFilter` argument to `SubscribeManual`
- Unity: `QuantumEvent/Callback`: an optional `onlyIfEntityViewBound` argument to `Subscribe` (makes sure the handler will only be invoked if `EntityView` on the listener has `EntityRef` assigned. `GetComponentInParent` is used to get the `EntityView` instance)
- Added `PositionOffset` and `RotationOffset` to most of the Quantum static collider scripts (these offsets are baked into the map)
- Added support for the `Inspector.Reorderable` attribute inside partial AssetObject implementations to display arrays as reorderable lists in the Unity inspector
- Added an Asset Database Windows toggle inside Quantum shortcuts
- New inspector attributes: DisplayName, ReadOnly, Range, ComponentTypeName
- XML API documentation files alongside core and PhotonDeterministic dlls (assemblies folder). If you don't want them to be copied into the Unity Quantum assemblies folder add this line to each configuration property group (debug, release) in your quantum.code.csproj `<AllowedReferenceRelatedFileExtensions>.pdb</AllowedReferenceRelatedFileExtensions>`
- Quantum Spectator project showcases a way to run the Quantum simulation online with Unity.

**Changes**

- Unity: CustomEditorsHelper has been deprecated, use QuantumEditorGUI instead.
- Math: `FP.Sqrt`, `FPVector3.Normalize` and `FPVector2.Normalize` speed up and precision increased
- Physics: First-hit-only Raycasts' performance improvements
- Synced events are culled immediately when a frame is predicted
- `quantum.codegen.unity` now checks if a file needs an update instead of overwriting it each time
- Unity: Addressables can now be enabled for all platforms only (in `QuantumEditorSettings`)
- Unity: prototypes' lists and dictionares fields that have not been decorated with `FreeOnComponentRemoved` are decorated with a reminder that they need to be freed manually.
- Removed `IFileLoader` and all its implementations
- `AssetGuid.ToString()` format changed to 16 digit hexadecimal number in brackets, e.g. `[0012345789ABCDEF]`
- `EntityRef.ToString()` format changed to `E.IIIII.VVV` format (I - index, V - version), e.g. `E.00123.001`
- `FPSinCos.bytes` replaced both `FPSin.bytes` and `FPCos.bytes`; since Unity packages can't handle file removal, `FPSin.bytes` and `FPCos.bytes` are now 0-sized and can be safely removed
- Removed `PROFILER_REPORT` define constant from the `quantum.code` project (`QUANTUM_REMOTE_PROFILER` on Unity's side remains)
- Unity: Scene loading has been reworked and is now controlled with `SimulationConfig.AutoLoadSceneFromMap` enum. `UnloadPreviousSceneThenLoad` is the new default. The `Legacy` way of loading scenes can still be selected but due to bugs it is discouraged.
- Unity: We added a new menu item `Export Asset DB` and kept the old way of exporting as `Export Asset DB (Through UnityDB)`. The new export will properly locate all assets files using the same process as the Asset Resource object generation instead of locating the files through the UnityDB.
- Unity: AssetBase has a new virtual member: `PrepareAsset()` which is called from `Loaded()`. The code from the Loaded method in `EntityPrototypeAsset` and `MapAsset` have been moved to `PrepareAsset()` because the latter is required to be called when exporting the Asset DB. Make sure to move your code into PrepareAsset() when you use the exported Asset DB.
- Renamed FixedArrayAttribute to ArrayLengthAttribute
- `ComponentTypeSelector.QualifiedName` and `ComponentTypeSetSelector.QualifiedNames` still work, but have been made obsolete. Use ComponentTypeName/ComponentTypeNames instead.
- `JsonAssetSerializeBase` uses Assembly Qualified Names only for user assets defined outside of `quantum.code`; for all other assets it uses `Type.FullName`. This change is backwards-compatible.

**Changes In Navigation**

- Improved quality and performance by updating the **pivot point calculation** for path-finding through triangles when Path Quality is set to `Good` or `Best` (toggle on `DrawPathfinderRawPath` in Editor Settings to observe)
- Under some conditions it is preferable for avoidance agents to be able to **reduce their speed** to convey a more natural avoidance behavior. Of course, this is not advisable for most player controlled units and can be opted in inside NavMeshAgentConfig
- The navmesh **cost** (weights) set under Unity Navigation Areas is exported and used by Quantum regions for heuristic calculations: check out `Cost` in the `MapNavMeshRegion` script
- **NavMeshAgentConfig**
    - Removed `Radius` (not used anymore)
    - Removed `ClampAgentToNavmeshRadiusThreshold` (not needed anymore)
    - Renamed `FindValidTargetCellRange` (integer) into `AutomaticTargetCorrectionRadius` (FP) for hopefully more clarity. Convert by finding out how one navmesh cell width translates to absolute distance.
    - Added `AvoidanceCanReduceSpeed` toggle (default is off)
    - Added `VerticalPositioning` selection to the steering section
- **SimulationConfig.Navigation**
    - Added `HeightThresholdForAvoidance` to filter out agents that are too far from each other (only required for 3D navigation)
    - Added `HeightThresholdForWaypoints` to support waypoint detection on different vertical layers (only required for 3D navigation)

- **API**
    Old method signatures have been marked `Obsolete`. Please update them.
    - **`Navigation/PathFinder.FindPath()`**
        - Removed `minDistanceToBorder` parameter
        - Changed Int32 `findValidTargetCellRange` to FP `automaticTargetCorrection`
        - Now returns a `FindPathResults` object which gives more information about what went wrong (see below) or upon `Success` gives access to the calucalted path:
        ```csharp
        public struct FindPathResult {
            public enum Code {
                Success,
                InvalidStartPosition,
                InvalidEndPosition,
                NoPathFound
            }

            public Code      Result;
            public FPVector3 CorrectedStartPosition;
            public FPVector3 CorrectedEndPosition;

            public int PathSize { get };
            public PathVertex[] Path { get };
        }
        ```
    - **`Navigation/NavMesh.LineOfSight()`**
        - Requires `FPVector3` inputs
        - We changed the algorithm to use navmesh triangle funnelling instead of raycasting the borders, which conveniently also works for 3D and is faster.
        - `Raycast2D()` (new method) is the former `LineOfSight()` implementation which is practically a raycast against the navmesh borders. This only works in 2D!
    - **`NavMesh`**
        - `MovePositionIntoNavmesh()` removed `agentRadius` and removed `radiusThreshold`
        - `FindTriangle()` renamed method to `FindTriangle2D()`
        - `FindClosestTriangle()` has been completely changed to support 3D:
        ```csharp
        bool FindClosestTriangle(FPVector3 sourcePosition, FP radius, NavMeshRegionMask regionMask, out Int32 triangle, out FPVector3 correctedPosition, MailboxSet8 mailbox = null)
        ```
        - (new) `NavMesh.GetHeightAtTriangleRaw()` use this to project the y-position onto a 3D triangle, the method expects that the 2D projection of the point is inside the 2D projection of the triangle.
        - (new) `NavMesh.FindRandomPointOnTriangle()` use this for an excellent randomization of a point inside one triangle.

**Removed**

- Removed the obsolete quantum.systems project (since 2.0) from the quantum_code solution
- Removed the `docs` folder and the quickstart guide while moving the API doc file into the root folder of the SDK, please refer to the online docs for starting guides
- Removed the unnecessary `PROFILER_REPORT` define constant from the quantum.code project (QUANTUM_REMOTE_PROFILER on Unity's side remains)
- Removed `DebugGizmoSize` from Navigation.Constants, the scaling is smartly matching the agent sizes

**Bug Fixes**

- Replays now work for late-joiners
- `FixedArray<T>` contents are used when calculating hash codes of owner structs (instead of just the pointer)
- Fixed the UI rendering of the Quantum shortcuts to better accommodate a wider layout
- Fixed the debug rendering of inactive navmesh region borders

**Shape Casts Details**

2D and 3D Shape Casts are now available as Regular and Broad-phase queries for all dynamic shapes supported. Internally, a custom GJK-based algorithm is used and new settings are available in the `Physics.GJKConfig` section in the Simulation Config. The new settings are intended to allow a trade-off between accuracy and performance, with the default values being a balanced compromise for regularly sized shapes:

- **Simplex Min/Max Bit Shift**: Allows better precision for points in the Voronoy Simplex by progressively shifting their raw values, avoiding degenerate cases without compromising the valid range of positions in the Physics space. Consider increasing the values if the scale of the shapes involved and/or the distance between them is very small.

- **Shape Cast Max Iterations**: The max number of iterations performed by the algorithm while searching for a solution below the hard tolerance. Increasing it might result in more accurate results, at the cost of performance in worst-case scenarios, and vice-versa.

- **Shape Cast Hard Tolerance**: An iteration result (closest distance between the shapes) below this threshold is acceptable as a finishing condition. Decreasing it might result in more accurate results, at the cost of more iterations, and vice-versa.

- **Shape Cast Soft Tolerance**: A shape cast resolution that fails to find an acceptable result below the defined Hard Tolerance within the Max Iterations allowed will still return positive if the best result found so far is below this soft threshold. In these cases, increasing this threshold enhances the probability of false-positives, while decreasing it enhances false-negatives.

## RC2N

### Build 1035 (May 04, 2022)

**Changes**

- 2D and 3D physics collider `Layer` fields are now get-set properties and check if values set are within the valid range

### Build 1034 (May 03, 2022)

**What's New**

- Added `release-profiler` assemblies to make the Quantum Task Profiler available for "release" builds. It needs to be added manually when upgrading Quantum: Add another build configuration (ReleaseProfiler) and reference `assemblies/release-profiler/quantum.code.dll`

**Changes**

- Removed `quantum.console.runner` from the upgrade file `quantum_code.zip`, it will still be included in the SDK package

**Bug Fixes**

- Fixed: CodeGen: FP constants generation issues on some platforms

### Build 1033 (May 02, 2022)

**Improvements**

- Improved the computation of 2D and 3D shape cast hit points by using the witness point of the shape being cast instead of the shape being hit

### Build 1032 (Apr 28, 2022)

**What's New**

- Annotating `Quantum.Asserts` with `System.Diagnostics.CodeAnalysis.DoesNotReturn` attributes

**Changes**

- Minor changes on the inspector `PhotonServerSettingsEditor`

### Build 1027 (Apr 25, 2022)

**What's New**

- Added `SimulationConfig` tooltips

### Build 1026 (Apr 22, 2022)

- This version fixes some issues in the avoidance algorithms and could lead to corrected but slightly different agent behavior, please make sure to check your agents still act as expected if you are using the avoidance feature

**What's New**

- `EntityViewUpdater.AutoFindMapData` - controls whether `EntityViewUpdater` will look for the current `MapData` with `FindObjectOfType` (true by default)

**Bug Fixes**

- Fixed: The navigation agent configuration option `Avoidance Can Reduce Speed` which did generate appropriate avoidance candidates but did not actually reduce the agents speed
- Fixed: An issue with avoidance that could lead to non-reciprocal avoidance vectors for head-on agent collisions (only one agent did the avoidance instead of both)
- Fixed: An issue that could cause an exception inside `Frame.UpdatePlayerData()` when running a replay

### Build 1019 (Apr 21, 2022)

**What's New**

- Debug output which triangles cannot fit into a region

### Build 1018 (Apr 20, 2022)

**What's New**

- New optimized overloads for `Navmesh.FindClosestTriangle()` that use the frame object to locate mailbox memory

**Bug Fixes**

- Fixed: Possible `DivideByZeroException` when performing a circle cast with a very small translation vector

### Build 1017 (Apr 19, 2022)

**What's New**

- `GetActorIds` to retrieve all actors currently in a `DeterministicServer`
- `Draw.Box` and `.WireBox` methods to the debug draw API

### Build 1016 (Apr 14, 2022)

**Changes**

- `QString` and `QStringUtf8` types are now Unity-serializable

**Bug Fixes**

- Fixed: Json.NET-based asset serializer not being able to read/write fixed-size buffers

### Build 1015 (Apr 12, 2022)

**Bug Fixes**

- Fixed: An issue in the pathfinder that could lead to slightly less efficient paths than possible

### Build 1014 (Apr 11, 2022)

**Bug Fixes**

- Fixed: An issue in `FindPath()` that would result in a straight path through a navmesh region disregarding the region cost if the target is in lineofsight
- Fixed: An issue that under some circumstances the navmesh region cost was not correctly applied for pathfinding

### Build 1012 (Apr 05, 2022)

**Bug Fixes**

- Fixed: An issue with 2D and 3D Physics CCD that could sometimes cause collisions to not be detected when the objects were overlapping at the beginning of the movement

### Build 1010 (Mar 30, 2022)

**Improvements**

- Marking `Navigation.LineOfSight` methods with `AggressiveInlining`
- Removed Trace logs coming from Debug `PhotonDeterministic` dll, including "Adjusting clock" notifications

### Build 1009 (Mar 29, 2022)

**Improvements**

- Exposed `GravityStrength` and `GravityNormalized` properties on 2D and 3D KCC config assets

**Changes**

- Removing explicit use of Newtonsoft Json `TypeNameHandling.Auto` which is not needed and poses a security thread when loading data from an untrusted source

### Build 1008 (Mar 28, 2022)

**Improvements**

- Added world-space versions of `FPCollision.LineIntersectsAABB` methods and improved xml documentation

### Build 1007 (Mar 25, 2022)

**Bug Fixes**

- Fixed: Too many heaps being created for some configuration of replay/checksum intervals

### Build 1006 (Mar 24, 2022)

**What's New**

- `Map.ScenePath` and `Map.SceneGuid` (helpful when implementing custom scene loading)

### Build 1005 (Mar 22, 2022)

**Bug Fixes**

- Fixed: Unused variable warning in Unity scripts
- Fixed: Missing call to `DumpFrameUser` on `Frame.DumpFrame`

### Build 1004 (Mar 21, 2022)

**What's New**

- Proper error messages on missing arguments when running codegen_unity tool (netcore)

### Build 1003 (Mar 18, 2022)

**Bug Fixes**

- Fixed: Memory leak on the Frame heap when disposing a `QHashSet`

### Build 1001 (Mar 16, 2022)

**Bug Fixes**

- Fixed: `AssetObject.Loaded` not being called for assets deserialize from snapshot
- Fixed: Loading of dynamic assets from `AssetObject.Loaded`

### Build 1000 (Mar 15, 2022)

**What's New**

- 2D `PolygonShape` now carries information about the polygon's centroid
- Frame Dumps now include 2D and/or 3D Physics Engine states

**Bug Fixes**

- Fixed: Issue in the serialization of the 2D and 3D Physics Engines state

### Build 999 (Mar 11, 2022)

**Bug Fixes**

- Fixed: Issue in 2D and 3D physics scene initialization logic, which could set wrong world settings when initializing from a snapshot (e.g. late-joins, replays)

### Build 998 (Mar 09, 2022)

**What's New**

- "Addressables: Use WaitForCompletion" Quantum setting - enabling it adds QUANTUM_ADDRESSABLES_USE_WAIT_FOR_COMPLETION define and let's Quantum use AsyncOperationHandle.WaitForCompletion (Addressables 1.17+) to load Addressable assets synchronously

### Build 997 (Mar 08, 2022)

**Bug Fixes**

- Fixed: An error in navmesh steering that was introduced by build Build 969 which resulted in drifting agents
- Fixed: Server snapshots on the custom plugin sample require to overload `OnDeterministicSnapshotRequested()`

### Build 995 (Mar 07, 2022)

**Bug Fixes**

- Fixed: Possible div0 exception in Navigation Avoidance calculation

### Build 994 (Mar 03, 2022)

**What's New**

- StateInspector: "Clear" button
- StateInspector: "Remove Other Runners" context menu item

**Bug Fixes**

- Fixed: A couple unused field warnings

### Build 993 (Mar 02, 2022)

**What's New**

- StateInspector & FrameDump support for QString and QBoolean pretty-print

**Bug Fixes**

- Fixed: Invalid property path in OptionalAttribute breaking the inspector

### Build 992 (Mar 01, 2022)

**What's New**

- An overload of `MapNavMeshBaker.BakeNavMesh()` that uses `Map` instead of `MapData`

### Build 991 (Feb 28, 2022)

**Bug Fixes**

- Fixed: Calling `NavMeshPathfinder.SetTarget()` with the same position will now reactivate stopped agents

### Build 990 (Feb 25, 2022)

**What's New**

- CodeGen: EOL for Unity scripts can now be controlled with "EndOfLineCharacters" DLL config setting. To enforce crlf (Windows style) use `<add key="EndOfLineCharacters" value="&#13;&#10;"/>`, to enforce lf (Linux style) use `<add key="EndOfLineCharacters" value="&#10;"/>`

**Bug Fixes**

- Fixed: CodeGen: invalid align/offsets for collection-backing pointers in case of element's align not being equal to 4

### Build 989 (Feb 24, 2022)

**What's New**

- CodeGen: Support for namespace-qualified attributes in Qtn

**Changes**

- A warning is emit if Quantum fails to deserialize received frame dump
- CodeGen: `Quantum.Ptr` fields now use namespace-qualified type name

### Build 988 (Feb 23, 2022)

**Bug Fixes**

- Fixed: `Frame.FreeUser` being called after `FrameBase.Free`, which disposes the Heap memory
- Fixed: 2D and 3D Physics engines' `Init` methods now ensure that world and bucket sizes are initialized with valid values, avoiding `DivideByZeroException`

### Build 987 (Feb 18, 2022)

**Bug Fixes**

- Fixed: `Frame.FrameAssets` incorrect `SimulationConfig` find method's name
- Fixed: Missing serialization of 2D and 3D static colliders' enabled state, which could cause desyncs on late-joins and issues on replays

### Build 986 (Feb 17, 2022)

**What's New**

- Support for FP constants in DSL. `#define FPConst 0.1223` will emit `Constants.FPConst` and `Constants.Raw.FPConst`

**Bug Fixes**

- Fixed: Codegen errors not appearing in `Errors List` window

### Build 983 (Feb 11, 2022)

**What's New**

- Support to disable Unity modules to reduce the build size. Toggle in `QuantumEditorSettings.Disable***Module` or define `#QUANTUM_DISABLE_PHYSICS2D`, `_PHYSICS3D`, `_AI`, `_TERRAIN`

**Bug Fixes**

- Fixed: An issue in `QuantumRunnerLocalDebug` (if QUANTUM_ADDRESSABLES is enabled) that prevented exceptions being logged due to how Unity runs async code

### Build 981 (Feb 10, 2022)

**What's New**

- FP implicit cast from byte and sbyte

**Changes**

- QuantumCodeIntegration no longer needs `Properties/AssemblyInfo.cs` removed
- Quantum Code Integration - quantum.code can be imported into Unity project with Package Manager. Follow instructions in `tools/codeintegration_unity/README.txt`

**Bug Fixes**

- Fixed: CodeGen.cs mixed end-of-line characters
- Fixed: Quantum Code Integration: .NET Standard 2.1 api compatibility is now supported
- Fixed: Range attribute not working in Unity 2021.2+

### Build 980 (Feb 09, 2022)

**Changes**

- Added deterministic `GetHashCode` override for each simulation struct
- DumpFlag_PrintRawValues dump flag also makes QDictionary print key hash values
- QBoolean implements IEquatable<QBoolean>

**Bug Fixes**

- Fixed: QuantumCodeIntegration throwing an exception if PhotonQuantumCode.dll is no longer accessible

### Build 977 (Feb 08, 2022)

**What's New**

- Warning message when setting a 2D or 3D Physics Collider physics material to an invalid asset

**Bug Fixes**

- Fixed: `FP.FromString` returning wrong values when providing strings with more than 14 digits of precision of the fraction part

### Build 976 (Feb 07, 2022)

**What's New**

- An additional version of the codegen_unity tool compiled as a `netcoreapp3.1` app to work with dlls created for `netstandard2.1` (located in tools/codegen_unity/netcoreapp3.1). Please also see readme.txt
- Warning/error messages when starting a Quantum game in WebGL and multithreading is enabled (`SimulationConfig.ThreadCount` > 1)

**Bug Fixes**

- Fixed: FPQuaternion.FromToRotation precision increased

### Build 975 (Feb 04, 2022)

**Bug Fixes**

- Fixed: `FPCollision.LineIntersectsCircle` no longer ignores intersections if the start of the line segment is inside the circle. An optional parameter can be set in order to ignore these cases (default to false)

### Build 973 (Feb 03, 2022)

**Bug Fixes**

- Fixed: A thread-safety issue on 2D and 3D Physics Engines when using joints and sleep detection
- Fixed: 2D and 3D Shape Cast hit Point being computed at the center of circles or spheres, respectively

### Build 972 (Feb 02, 2022)

**What's New**

- `FPVector3.SignedAngle()`, equivalent to Unity's `Vector3.SignedAngle()`

**Changes**

- `Frame.SystemDisable<T>(T system)` now always uses the system instance runtime type instead of T (explicit or implicit)
- The assembly information of the Quantum dlls now contains Debug/Release information and debug dlls are now also tagged correctly

### Build 970 (Feb 01, 2022)

**What's New**

- `QuantumEditorSettings` now has options to position the QuantumToolbar (level dropdown)

### Build 969 (Jan 31, 2022)

**What's New**

- NullableNonNegativeFP

**Bug Fixes**

- Fixed: An issue with the properties of `NavMeshAvoidanceAgent` (AvoidanceMask, AvoidanceLayer, Priority) and `NavMeshSteeringAgent` (Acceleration, MaxSpeed) that were changed after instantiation and overwritten by values from the config during `frame.Set()` or `NavMeshPathfinder.SetConfig()`. `NavMeshPathfinder.SetConfig()` has an optional `overwrite` bool that forces the reset of the mentioned properties which is set to true for backwards compatibility reasons.
- Fixed: Issues on the 2D Hinge Joint when both joint and connected entity were dynamic rigid bodies

### Build 968 (Jan 27, 2022)

**Changes**

- `EntityViewUpdater.LoadMissingPrefab` will attempt to load a missing view synchronously now

**Bug Fixes**

- Fixed: Issues on the 2D and 3D Physics engines when the session is initialized with `RuntimeConfig.Map` as default or invalid
- Fixed: QuantumPrefabAsset_Resources resource path not having its extension removed

### Build 967 (Jan 26, 2022)

- Upgraded Photon Realtime to 4.1.6.12

**What's New**

- WebGL builds are now supported (experimental). Photon WebSocket libraries are included in the SDK.  
Important notes when targeting WebGL:  
- Change `SimulationConfig` Thread Count to 1 (browsers/Unity WebGL builds do not support multi-threading)  
- Recommended Unity version: 2021.2.8f1 (better performance). Minimum version: 2018.4.30f1  
- Tested browsers and platforms: Chrome, Firefox, Edge and Safari, running on PC Windows or Mac

### Build 966 (Jan 25, 2022)

**What's New**

- A new optional `OnBeforeBake` signature that includes the `BuildTrigger`
- 2D and 3D Physics' callbacks API now have `ResetCallbacks`, a way to reset the collision history of an entity, used to compute OnEnter/OnExit conditions
- A new optional `OnBeforeBake` signature that includes the bake flags `QuantumMapDataBakeFlags`

### Build 964 (Jan 21, 2022)

**What's New**

- `EntityViewUpdater.LoadMissingPrefab` - a way to load a view if it missing in `EntityView` asset
- Experimental Prefab Standalone Assets (.qprefab) - a way to supply the AssetDB with prototype and view assets without hard references to prefabs. This is useful if prefab being loaded along with its nested assets is problematic. To enable for a prefab, select its nested `EntityViewAsset` or `EntityPrototypeAsset` and follow instructions
- `EntityViewUpdater.LoadMissingPrefab`: a way to load a prefab that might be initially missing

**Changes**

- Print conflicting asset's path if there is a guid/path conflict

### Build 962 (Jan 19, 2022)

**What's New**

- `AssetDB.LoadedAssets` - a way to iterate over all loaded assets

**Improvements**

- Handling of exceptions during deserialization of RuntimePlayer data, now logged as error if in Debug mode

### Build 961 (Jan 17, 2022)

**Changes**

- Updated Unity git igrore file to optionally include quantum pdb files

**Bug Fixes**

- Fixed: Quantum State Inspector window being closing in some situations

### Build 959 (Jan 12, 2022)

**Bug Fixes**

- Fixed: An issue that could cause an exception to be thrown inside the navigation introduced by Build 957

### Build 958 (Jan 11, 2022)

**Improvements**

- Improved the usable range of parameters on `FPCollision.LineIntersectsCircle`, reducing the risk of overflows

### Build 957 (Jan 10, 2022)

**Bug Fixes**

- Fixed: An issue with `NavMesh.MovePositionIntoNavmesh()` when evaluating grid cells with more then 32 borders inside which could lead to the agent clipping through walls. The navmesh agent option `Clamp Agent to Navmesh` was also affected. Please switch to the signature with `Frame` when using the method explicitly
- Fixed: MemoryIntegrity error for ComponentReference`, `EntityPrototypeRef`, `CompoundShape3D` and `CompoundShape2D` on some platforms

### Build 956 (Jan 06, 2022)

**Bug Fixes**

- Fixed: Loaded is called on AssetObject when it's injected into dynamic DB

### Build 955 (Jan 05, 2022)

**Bug Fixes**

- Fixed: Physics `OnExit` callbacks being called when one of the entities involved entered a sleeping state

### Build 953 (Dec 20, 2021)

**Bug Fixes**

- Fixed: Issues when configuring 2D and 3D hinge joints with negative `MaxMotorTorque`

### Build 951 (Dec 14, 2021)

**Bug Fixes**

- Fixed: Checksum error dumps showing `IsVerified=false`
- Fixed: An issue on the Quantum simulator that could cause assertion exceptions when the `InputOffsetMin` of the config sent by the client differed from the one received from the server

### Build 949 (Dec 08, 2021)

**What's New**

- `QuantumGame.SendPlayerData` overload that does not require the player index to be specified, useful when clients always control only one player

### Build 947 (Dec 02, 2021)

**What's New**

- `TryGetQueryHits` method on 2D and 3D Physics API to try and retrieve the results of a broad-phase query

**Bug Fixes**

- Fixed: Issues when enabling toggleable mesh colliders that were initialized as disabled, expanding internal buffers in the process, which could corrupt memory and cause crashes

### Build 946 (Dec 01, 2021)

**What's New**

- `Map` property on 2D and 3D Physics APIs, to retrieve the map asset currently used on the respective physics scene

### Build 945 (Nov 30, 2021)

**What's New**

- Support to Paint Holes on Terrain static colliders

**Bug Fixes**

- Fixed: Worker threads being able to access an asset before `Loaded` callback was invoked
- Fixed: CodeGen - order of attributes for Unity prototype scripts is more cross-platform now, with `System` attributes being emit first

### Build 944 (Nov 29, 2021)

**Bug Fixes**

- Fixed: `DivideByZeroException` on `FPVector3.Slerp` and `.SlerpUnclamped` when vector were collinear
- Fixed: Instability issues on 3D hinge joints, specially perceptible on rotated hinges with larger mass

### Build 943 (Nov 26, 2021)

**What's New**

- Xml documentation to interpolated error correction settings on `EntityView`

### Build 942 (Nov 25, 2021)

**What's New**

- Added two new navmesh related callbacks to `MapDataBakerCallback`. This change makes the navmesh baking more customizable without having to completely replace it. Either hook into `OnCollectNavMeshBakeData` (inject BakeData into Quantum Navmesh baking pipeline) or `OnCollectNavMeshes` (inject Navmesh objects into Asset serialization)
- `EntityPrototypeContainer.SetDirty`. Needs to be called if `Components` property has been modified
- `SystemIsEnabledSelf`, `SystemIsEnabledInHierarchy`
- Nested systems are enabled/disabled when group is enabled/disabled

**Changes**

- `OnEnabled` and `OnDisabled` callback on SystemBase are called based on state of the hierarchy of the grouped systems. Systems update is called when it's enabled in hierarchy

**Bug Fixes**

- Fixed: An issue with 3D navmesh Delaunay triangulation that caused the navmesh to deform near slopes. Use the checkbox `DelaunayTriangulationRestrictToPlanes` in those cases
- Fixed: `EntityPrototypeContainer` not being sorted again if repopulated
- Fixed: Update is not called on disabled nested system when group is enabled

### Build 941 (Nov 24, 2021)

**Breaking Changes**

- Multi-threaded, built-in system types on `Quantum.Task` namespace now have their `OnInit` override marked as sealed. Inheritors can override `OnInitUser` instead

### Build 940 (Nov 23, 2021)

**Bug Fixes**

- Fixed: `Photon/Quantum/Editor/Generated` scripts being included in the unity upgrade package

### Build 939 (Nov 22, 2021)

**Bug Fixes**

- Fixed: Misleading `velocity` parameter on 2D and 3D KCC, now renamed to `direction`

### Build 936 (Nov 18, 2021)

**What's New**

- `QuantumGameFlags` code documentation

**Changes**

- `DeterministicCommandSerializer` will now log a warning when attempting to register multiple Command factories of the same type

### Build 935 (Nov 17, 2021)

**Bug Fixes**

- Fixed: `AssertException` in Debug mode when performing a component removal, followed by the addition of the same component and then the destruction of the entity on the same frame

### Build 934 (Nov 16, 2021)

**Bug Fixes**

- Fixed: An issue with `FPAnimationCurve` where the `PostWrapMode` was not being able to be set independently from the `PreWrapMode`

### Build 933 (Nov 12, 2021)

**What's New**

- Built-in support to compound Commands through the new `Core.CompoundCommand` type
- Built-in support for Command pooling through the new `DeterministicCommandPool<T>` class, which can also be registered as factory on `DeterministicCommandSetup.AddCommandFactoriesUser`
- `IDeterministicCommandFactory` interface, now registered during Command setup to provide instances of Commands for de-serialization

**Improvements**

- Commands now implement `IDisposable`, which can be overridden on concrete types and used in conjunction with command factories to implement pooling patterns, for example

**Changes**

- Default `BitStream` size used for `RuntimeConfig` serialization changed from 1 to 8KB
- `CommandSetup.CreateCommands` is now deprecated. Command factories should be registered through a partial declaration of `DeterministicCommandSetup.AddCommandFactoriesUser` instead, as shown on `CommandSetup.User.cs` available on the SDK package (not on the upgrade zip). Command instances can be used as factories of their own type, so instances returned from the deprecated method are still functional
- `CommandSetup.cs` file was replaced by `CommandSetup.Legacy.cs` and `CommandSetup.User.cs`. The old file's implementation is now deprecated, although still functional. To replace the old file by the new ones, remove `quantum.code\CommandSetup.cs` file from the `quantum_code.csproj` and copy and add `quantum.code\CommandSetup.Legacy.cs` and `quantum.code\CommandSetup.User.cs` from the SDK folder into your project (those files are not inside the upgrade zip).

```xml
  <!-- OLD quantum.code.csproj -->
  <ItemGroup>
    <Compile Include="Core\CodeGen.cs" />
    <Compile Include="CommandSetup.cs" />
    <Compile Include="Core\Core.cs" />
    ...
  </ItemGroup>
  
  <!-- NEW quantum.code.csproj -->
  <ItemGroup>
    <Compile Include="CommandSetup.User.cs" />
    <Compile Include="Core\CodeGen.cs" />
    <Compile Include="CommandSetup.Legacy.cs" />
    <Compile Include="Core\Core.cs" />
    ...
  </ItemGroup>
```

**Bug Fixes**

- Fixed: Issues with Commands being shallow-copied during de-serialization, caused by shared reference types when de-serializing multiple commands of the same type on the same frame

### Build 929 (Nov 10, 2021)

**What's New**

- QHashSet
- `TryResolve` QCollection methods to `FrameThreadSafe`

### Build 928 (Nov 05, 2021)

**What's New**

- `[AllocateOnComponentAdded]` - a way to auto allocate lists/dictionaries when component gets added to an entity

### Build 927 (Nov 05, 2021)

**What's New**

- Thread-safe overloads to `GetStaticData` methods on 2D and 3D Hit structs

**Bug Fixes**

- Fixed: Issues on the 3D KCC penetration correction when steering over triangles on a mesh
- Fixed: FP precision issue on the penetration correction algorithm of the 2D and 3D KCCs

### Build 926 (Nov 04, 2021)

**What's New**

- `[EntityComponentConfig]` attribute. Add it to a partial prototype class and set `GenerateLinkingScripts` to `false` to prevent `MonoBehaviour` from being created for this component

**Changes**

- Prototype components are no longer emit as `sealed` classes

**Bug Fixes**

- Fixed: FP precision issues on 3D Hinge Joints when the inertia of the joint body reached higher values
- Fixed: Instabilities on 2D and 3D Hinge Joints when the joint body did not have mass 1 and/or was connected to another dynamic body as anchor

### Build 925 (Nov 03, 2021)

**Bug Fixes**

- Fixed: 2D and 3D broad-phase queries giving a `NullReferenceException` when resolving against an dynamic entity with CCD enabled

### Build 924 (Nov 02, 2021)

**Changes**

- Removed verbose assertion error regarding inaccuracies on the 3D Physics CCD algorithm while the issue is being investigated

### Build 923 (Nov 01, 2021)

**Bug Fixes**

- Fixed: An issue in the 2D and 3D collision solvers that was cause the angular velocity of kinematic bodies to not affect the resolution

### Build 921 (Oct 29, 2021)

- Initial RC2 version

## RC1

### Build 920 (Oct 29, 2021)

**Changes**

- Released 2.1.0 RC1

**Bug Fixes**

- Fixed: CodeGen not printing the missing type's name in `hasAnyFieldRecurse`

## A1N

### Build 919 (Oct 28, 2021)

**Bug Fixes**

- Fixed: Issue that could cause Commands and RuntimePlayer data sent in the first N frames to not be attached to valid frames, where N is the `DeterministicConfig.InputDelayMin`

### Build 918 (Oct 25, 2021)

**What's New**

- Improved 2D and 3D KCC penetration correction algorithms, specially the behavior on acute corners

**Bug Fixes**

- Fixed: An imprecision in the 2D Circle-Edge collision check that could cause assertion errors
- Fixed: An issue on 2D and 3D KCCs that could cause the penetration correction to push the character further inside the collider in case the contact point was past the character center in the normal direction

### Build 917 (Oct 22, 2021)

**What's New**

- Enums as dictionary keys support. Note that they resolve to `QEnumDictionary<K, V>` rather than `QDictionary<K, V>`. To avoid this implementation detail use `var`
- `Frame.AllocateList` and `Frame.AllocateDictionary` overloads that take `QListPtr`/`QDictionaryPtr` for auto generic argument deduction. E.g.: `var dict = frame.AllocateDictionary(c.DictPtr); c.DictPtr = dict;`
- Partial support for enums as dictionary keys. If an enum type is used as the dictionary key type in DSL, the QDictionaryPtr that's emit will use the underlying enum primitive type instead

### Build 916 (Oct 20, 2021)

**Changes**

- Reduced the `FP.UsableMax` raw value by 1, in order to prevent overflows in edge cases

### Build 914 (Oct 14, 2021)

**Bug Fixes**

- Fixed: An issue on 2D and 3D Physics Queries that could cause invalid memory accesses when the query boundaries were partially inside and outside the FP usable range

### Build 913 (Oct 13, 2021)

- Upgraded Photon Realtime to 4.1.6.9

**Bug Fixes**

- Fixed: An issue on 2D and 3D physics solvers that could cause collision constraints to be ignored when stitching islands due to the existence of joint constraints
- Fixed: Distance gizmos of 3D Spring Joint

### Build 912 (Oct 12, 2021)

**What's New**

- `quantum.codegen.unity.host` argument: third and subsequent arguments specify additional assembly search paths; useful when `quantum.code` references external assemblies

**Bug Fixes**

- Fixed: `DebugDraw.DrawSphere` not using `DebugDraw` material

### Build 911 (Oct 11, 2021)

**What's New**

- `FPMatrix2x2` operators and `Inverted` getter
- `IEntityPrototypeMaterializedListener` - an interface that, if implemented by `ComponentPrototype`, will receive entity post-materialization notification

**Removed**

- Old Physics3D.Joints API, now accessible through the PhysicsJoints3D component

**Bug Fixes**

- Fixed: 2D Spring Joint prototypes now compute spring and damper settings after both the joint and connected entities are materialized (the later is optional)
- Fixed: Default `PrototypeMaterializationContext` used on `ComponentPrototype.AddToEntity(Frame, EntityRef)` now has the `Entity` and `ComponentTypeId` fields set

### Build 910 (Oct 08, 2021)

**Changes**

- `QDictionary` indexer set method now inserts a new entry in case the key does not yet exist (same as `System.Collections.Generic.Dictionary`), instead of throwing an `InvalidOperationException`.  
Indexer get method now throws `KeyNotFoundException` instead of `InvalidOperationException` if the key is not found
- CodeGen: less property drawer types generated. `PrototypeDrawer` is a partial class now and can have more types added with `CustomPropertyDrawer`

**Bug Fixes**

- Fixed: Upgrade `tools_and_assemblies.zip` now contains `tools/codeintegration_unity` folder

### Build 909 (Oct 07, 2021)

**What's New**

- CodeGen `[PreserveInPrototype]` attribute. Added to a type marks it as usable in prototypes and prevents prototype class from being emit. Added to a field only affects a specific field. Useful for simple `[Serializable]` structs as it avoids having to use `_Prototype` types on Unity side

**Bug Fixes**

- Fixed: An issue on the client simulator that would cause the input polling for a given frame to be skipped or polled in duplication when the input offset increased or decreased, respectively

### Build 908 (Oct 06, 2021)

**What's New**

- `LayerInfo.GetLayerMask` overloads that accept 1-3 layer names instead of an array of names, which can generate allocations if used inadvertently

### Build 907 (Oct 05, 2021)

**What's New**

- Frame.TryResolveList/Dictionary and Frame.TryFreeList/Dictionary - a way to avoid having to check pointer for being null or not

### Build 906 (Oct 04, 2021)

**What's New**

- `GetCallbacks` on 2D and 3D Physics API, allowing the retrieval of the physics callback flags currently set to a given entity

**Bug Fixes**

- Fixed: `AssetBasePostprocessor` and `EntityViewEditor` not compiling in Unity 2021.2
- Fixed: UnityEditorInternal.ReorderableListWrapper.Draw exception on editor startup for Unity 2021.1.23

### Build 905 (Oct 01, 2021)

**What's New**

- More overloads to add, get or set a (singleton) component using the component index instead of a static type

**Bug Fixes**

- Fixed: StateInspector reflection ambiguity exception

### Build 904 (Sep 30, 2021)

**Changes**

- Upgraded Photon Realtime to 4.1.6.7

### Build 899 (Sep 24, 2021)

**Changes**

- `InputProvider.CanSimulate` now returns false instead of throwing an `IndexOutOfRangeException` in some cases where the requested frame is not in the input buffer

**Removed**

- Marked `QuantumRunner.StartParameter.IsRejoin` and `DeterministicSession.Join()` `isrejoin` parameter as obsolete. It is not required to send this information anymore

**Bug Fixes**

- Fixed: 2D and 3D static colliders position offsets not being scaled by the GameObject's transform

### Build 897 (Sep 23, 2021)

**Changes**

- `EntityRef.GetHashCode` is monotonic for sensible range (above short.max, for index and version)

**Bug Fixes**

- Fixed: `EntityRef.GetHashCode`: results are more spread out

### Build 896 (Sep 22, 2021)

**Changes**

- Addressables support no longer marked as experimental

### Build 895 (Sep 21, 2021)

**What's New**

- `Sleep` method on 2D and 3D Physics Body components, to force bodies into a sleeping state

**Bug Fixes**

- Fixed: An issue in the inertia computation of 3D physics bodies with center-of-mass offset and linked to colliders with compound shapes

### Build 893 (Sep 20, 2021)

**What's New**

- `Quantum.Task.SystemThreadedFilter<T>`, `SystemThreadedComponent<T>`, `SystemArrayFilter<T>` and `SystemArrayComponent<T>`: multi-threaded versions of base systems for component and filter iterators
- `ComponentFilterStruct.Reset` methods and optional offset/count parameters
- `ComponentBlockIterator.Reset` methods

**Bug Fixes**

- Fixed: An issue in the navigation system for `MovementType` callback that could cause the `desiredDirection` parameter of the `OnNavMeshMoveAgent` callback to be (0/0) for the tick when a waypoint is reached and it could cause the waypoint detection to be inaccurate resulting in overshooting. `NavMeshSteeringAgent` now updates it's `Velocity` field in the case of `MovementType` callback

### Build 891 (Sep 17, 2021)

**What's New**

- Exposed `Frame.ComponentCount(int componentIndex)` overload, in addition to the existing type-bound method

**Bug Fixes**

- Fixed: `DeterministicConfig.Lockstep` helpbox text
- Fixed: Full type names not working with `import struct` and `import enum`

### Build 890 (Sep 16, 2021)

**What's New**

- 2D and 3D Hit structs now have Get and TryGet StaticCollider/StaticData methods, allowing safe and convenient access to info regarding a static collider hit

### Build 887 (Sep 14, 2021)

**What's New**

- Callbacks for Plugin Disconnects to be able to react to errors which will result in the simulation being destroyed (for this the `IDeterministicGame` interface was slightly modified).  
Use `QuantumCallback.Subscribe(this, (CallbackPluginDisconnect c) => OnCallbackPluginDisconnect(c.Reason));` to be notified about the errors and pending shutdowns in Unity
- 2D and 3D Static Colliders can now reference a Unity collider to be used as source

**Bug Fixes**

- Fixed: 2D and 3D Physics Collider prototypes having the `IsTrigger` field as read-only on Inspector

### Build 885 (Sep 12, 2021)

**What's New**

- Safe overloads of 2D and 3D Physics' `AddShapeCastQuery`, `ShapeCast` and `ShapeCastAll` methods

### Build 884 (Sep 11, 2021)

**What's New**

- Create basic Static Mesh Collider with Hierarchy menu helper

### Build 883 (Sep 10, 2021)

**What's New**

- Documentation of 2D and 3D `CharacterControllerMovement` data returned by raw queries
- `Without` and `Any` virtual properties to `SystemMainThreadFilter`, which can be overridden to define a set a components that the filtered entities should not have or have at least one, respectively
- Overloads to Frame `Add`, `AddOrGet`, `Set` and `Remove` that accept a component index instead of a concrete type

### Build 882 (Sep 09, 2021)

**What's New**

- `[PtrSize]` attribute - a way to set `Ptr` data size to a constant (e.g. `[PtrSize(10)]`) or to a code snippet (e.g. `[PtrSize("sizeof(FooComponent)")]` or `[PtrSize("p->sizeField")]`). That way contents pointed to can be serialized without any need for user code

### Build 879 (Sep 07, 2021)

**Bug Fixes**

- Fixed: Usages of `Photon.Realtime.Player` class on `QuantumMultiClientPlayer` are now fully qualified to avoid type ambiguity

### Build 878 (Sep 07, 2021)

**What's New**

- `FPMatrix3x3`

**Bug Fixes**

- Fixed: The computed inertia of 3D bodies with center of mass offset

### Build 877 (Sep 06, 2021)

**What's New**

- `SimulationConfig.ChecksumErrorDumpOptions`, a way to influence what's in checksum error framedumps
- Quantum.Inspector.EnumFlags - a way to force enums to be drawn as flags for Unity < 2021
- DumpFlag_AssetDBChecksums - print asset db checksums in the frame dump
- SimulationConfig.ChecksumErrorFrameDumpOptions

**Changes**

- `EnumFlagsAttribute` moved to to quantum.code. Old `EnumFlagsAttribute` still works, but is now obsolete

### Build 876 (Sep 04, 2021)

**Breaking Changes**

- Static colliders position and rotation offsets are now expressed in the local space of the GameObject's transform instead of in world space

**Bug Fixes**

- Fixed: Drawing of add/remove vertex buttons on 2D static polygons with rotation offset

### Build 875 (Sep 03, 2021)

**What's New**

- Frame.DumpFlag_ComponentsChecksum - passed to DumpFrame will print each component's checksum
- Support for multiple `FramePrinter.PtrBufferAttribute` per `Ptr` field. Useful if the pointer contains non-uniform data

**Changes**

- FrameDump caused by a desync uses Frame.DumpFlag_ComponentsChecksum flag
- Reduced `NavMeshPathfinder` size to 96 bytes (from 112)

**Bug Fixes**

- Fixed: An issue in the `NavMeshPathfinder` component that could cause a desync which did not show any differences in the desync UI
- Fixed: An issue in the serialization of waypoint link ids, accessible by `NavMeshPathfinder.CurrentLink()`, which caused wrong link ids for late-joiners
- Fixed: `NavMeshPathfinder` serializing unused waypoints data
- Fixed: Assertion error when allocating an `UnsafeHashMap` structure in a 32-bit architecture (e.g. ARMv7 on Android)

### Build 874 (Sep 02, 2021)

**What's New**

- Support for subclassing non-abstract asset types

### Build 870 (Sep 01, 2021)

**Changes**

- Made usages of the `Photon.Deterministic.Native` class fully qualified, to avoid clashes between different packages (like with Photon Fusion)

### Build 865 (Aug 30, 2021)

**What's New**

- `GetPointVelocity` and `GetRelativePointVelocity` helper methods to 2D and 3D Physics Body components

### Build 864 (Aug 27, 2021)

**Changes**

- QuantumEditorSettings inspector no longer displays an error if any of `AssetSearchPaths` is not an `Assets`-based path

**Bug Fixes**

- Fixed: AssetDB not supporting assets from Packages

### Build 863 (Aug 26, 2021)

**What's New**

- `Assert.Check` and `Assert.Always` overloads that accept a string format and/or parameterized values, avoiding allocations on the method calls

### Build 862 (Aug 25, 2021)

**Bug Fixes**

- Fixed: Changing pdb type to portable for Quantum release dlls

### Build 861 (Aug 23, 2021)

**What's New**

- Safe overloads to 2D and 3D PhysicsBody `AddLinearImpulseAtPosition` and `AddForceAtPosition`

**Bug Fixes**

- Fixed: An assertion thrown in `ThreadLocal.AllocateMailboxBuffer()` that was caused by a `NavMeshPathfinder` component being set to `Active` without having associated a navmesh using `SetTarget()` before

### Build 860 (Aug 20, 2021)

**Bug Fixes**

- Fixed: `QList.GetEnumerator` no longer generates box allocation

### Build 859 (Aug 11, 2021)

**Bug Fixes**

- Fixed: Inspector's ReorderableListWrapper exception for early Unity 2020.2 versions

### Build 858 (Aug 05, 2021)

**What's New**

- FP.MulTruncate - truncating multiplication, rounding towards negative infinity
- Added a variable for `EmptyRoomTTLInSeconds` to the `Photon Sever Settings` script
- The option to configure the server input buffer and history sizes when running a custom plugin
- Spectator class (quantum.console.spectator) now can use local snapshots during reconnecting attemps
- `DeterministicPlugin` and `DeterministicServer` now have access to EmptyRootTTL

**Changes**

- Converting exeptions during the LUT initialization on the custom plugin SDK to meaningful error messages
- FP.ToString - each FP has a unique string representation and has a minimal string length (within precision range)
- Spectator class (quantum.console.spectator) `Run()` method can now be can be canceled with a CancellationToken
- Spectator class (quantum.console.spectator) can pass an optional start parameters (e.g. LoadBalancingServer object) into the `Run()` method
- Using `DeterministicPlugin` as logger interface when initializing the static Quantum log wrapper
- The time window for accepting local snapshots (was fixed to 10 seconds) is now adapting to the EmptyRoomTTL (capped to 2 min)

**Bug Fixes**

- Fixed: The behaviour of setting 0 for `NavMeshAgentConfig.AngularSpeed` which now disables setting any rotation on the transform by the agent steering (set to 200 or more to keep the rotation but disable the angular acceleration)
- Fixed: An issue in the Spectator class that could cause the reconnection logic to delay or not run at all
- Fixed: An issue in the Spectator project where `DisconnectAsync()` would cause an unwanted exception when the connection is already disconnecting
- Fixed: An issue in `SessionContainer` where the allocator was shared between sessions which could cause problems with the custom plugin SDK when closing sessions
- Fixed: An issue that could cause fast reconnecting players fail to start the simulation if they are also selected as a snapshot provider

### Build 852 (Aug 04, 2021)

**Changes**

- Array returned in `SystemSetup.CreateSystems` can have null elements - they are filtered out before any processing. This was already the behavior of `CommandSetup.CreateCommands`
- DebugCommand now registers a dummy system and a dummy command in the Release configuration. This is to ensure replays can be used regardless of configuration. Define QUANTUM_DEBUG_COMMAND_DISABLED to fully disable DebugCommand

**Bug Fixes**

- Fixed: Replays not being compatible across Debug and Release configurations due to DebugCommand's system and command being registered only in Debug builds

### Build 851 (Aug 02, 2021)

**Changes**

- QuantumAutoBaker visibility to public

**Bug Fixes**

- Fixed: Removing the NavMesh borders < 16384 limitation
- Fixed: FixedCurveDrawer using property name instead of display name

### Build 850 (Jul 31, 2021)

**What's New**

- Gravity Scale attribute to 2D and 3D Physics Bodies, which can be used to disable, scale and/or invert the direction of the applied gravity on each entity

### Build 849 (Jul 29, 2021)

**Changes**

- Remove/Destroy commands metadata are now stored in multiple memory blocks that expand and shrink on demand.  
This fixes issues with the heap page max size and reduces memory consumption when the usage of these commands is not uniform throughout the session

### Build 848 (Jul 28, 2021)

**Bug Fixes**

- Fixed: An issue with 3D Physics Bodies with Box shape that caused added angular impulses to not be integrated and added torques to be partially integrated
- Fixed: `PhysicsBody3D.ClearTorque` not clearing accumulated torques, only angular impulses

### Build 846 (Jul 24, 2021)

**Breaking Changes**

- `Quantum.Physics2D` and `.Physics3D` classes were converted to namespaces of the same name, respectively. Access to the API and wrapped types should not be affected

**What's New**

- DSL support to 2D and 3D Physics types: `Hit`, `Hit3D`, `Shape2D`, `Shape3D`, `Joint`, `DistanceJoint`, `SpringJoint` and `HingeJoint`
- Serialization code to `Physics2D.Hit` and `Physics3D.Hit3D`

**Changes**

- Increased max Systems count from 256 to 1024
- Increased max Tasks count from 128 to 1024

### Build 844 (Jul 21, 2021)

**What's New**

- 2D Physics Joints API documentation

**Bug Fixes**

- Fixed: StackOverflowException when using cyclic references in DSL. Name of the reentered type is printed in the error message instead

### Build 843 (Jul 20, 2021)

**What's New**

- `PhysicsJoints2D.Capacity`, `.RemoveAt`, `.RemoveAtUnordered` and `.GetIterator`

**Bug Fixes**

- Fixed: Unity codegen issue: generic asset types no longer require `[AssetObjectConfig(GenerateLinkingScripts = false)]` attribute
- Fixed: Unity codegen issue: generic asset types can be derived from

### Build 835 (Jul 18, 2021)

**What's New**

- 2D `SpringJoint.GetStiffness`, which converts spring and damper capacities to frequency and damping ratio, complementing the existing `SetStiffness` method

**Bug Fixes**

- Fixed: Missing serialization for FPMatrix2x2

### Build 834 (Jul 16, 2021)

**What's New**

- New 2D Physics Joint System: includes Distance, Spring and Hinge joints
- Exposed scheduled TaskCount in the frame TaskContext

**Changes**

- Modifications to the frame `PhysicsSceneSettings` will now only affect the physics simulation from the following frame onwards, instead of having immediate effect

**Removed**

- Old Physics2D.Joints API, now accessible through the PhysicsJoints2D component

### Build 833 (Jul 09, 2021)

**What's New**

- Implicit casts from UInt32, Int16 and UInt16 to FP
- QuantumStallWatcher - a script that can crash the build and produce a call stack, in case a simulation stalls. Needs QUANTUM_STALL_WATCHER_ENABLED define symbol to be enabled

### Build 832 (Jul 08, 2021)

**Bug Fixes**

- Fixed: Quantum.codegen performance for large projects

### Build 831 (Jul 07, 2021)

**Bug Fixes**

- Fixed: Type mismatch between `BitStream.WriteStringGZip` and `.ReadStringGZip` serialization code that could corrupt the de-serialized data

### Build 830 (Jul 06, 2021)

**Bug Fixes**

- Fixed: An issue whit Filters of a single component type returning entities that had said component removed while the removal was not committed in memory

### Build 829 (Jul 02, 2021)

**Changes**

- Upgraded Photon C# Client Library to 4.1.6.3

**Bug Fixes**

- Fixed: An error in the Unity Quantum asset pipeline that was thrown when scene object were processed inside the `Resources/DB` folder

### Build 824 (Jul 01, 2021)

**Changes**

- Inverted the `.gitignore` proposal from excluding generated Quantum files (.cs and .dll) in the Unity project from version control to including them
- Improved 3D Shape Cast algorithm to reduce the chances of FP overflow when working on a scaled simplex

### Build 821 (Jun 28, 2021)

**Bug Fixes**

- Fixed: Warning in MenuShortcuts.cs on Mac

### Build 820 (Jun 25, 2021)

**What's New**

- `FPVector3.Slerp` and `SlerpUnclamper`, equivalent to their Unity counterparts
- FPMath.Exp

**Bug Fixes**

- Fixed: Inconsistent line endings warning for CodeGen scripts on macOS

### Build 819 (Jun 24, 2021)

**Bug Fixes**

- Fixed: EntityViewUpdater creating/activating view instances without transform components at zeroed position/rotation instead of the default values defined on the EntityView object

### Build 818 (Jun 22, 2021)

**Changes**

- Attempting to retrieve Broad-phase query results using an invalid index will now throw an exception instead of logging a warning on Debug

### Build 817 (Jun 21, 2021)

**Bug Fixes**

- Fixed: AssetRefDrawers needing to be reset before assignment if using assets sub classes

### Build 816 (Jun 18, 2021)

**Changes**

- `EntityViewUpdater.DestroyEntityView(QuantumGame, EntityView)` is now declared as `protected virtual` and can be overridden in custom EVU implementations

### Build 815 (Jun 17, 2021)

**Changes**

- Upgraded Photon Realtime to version 4.1.6.2, please read `Assets/Photon/PhotonLibs/changes-library.txt` and `Assets/Photon/PhotonRealtime/Code/changes-realtime.txt` for changes

**Removed**

- `Assets/Photon/PhotonLibs/WebSocket` folder please delete it manually. Websockets are included in the netstandard libraries
- Old sample `Assets/Photon/PhotonRealtime/Demos`
- Old Relatime changelog `Assets/Photon/PhotonLibs/release_history.txt`

**Bug Fixes**

- Fixed: Quantum simulation trying to advance even if the runner was Paused (e.g. waiting for a snapshot), which caused callbacks like `UpdateView` and `PollInput` and `SimulateFinished` to get called

### Build 814 (Jun 16, 2021)

**Bug Fixes**

- Fixed: A typo in EntityView.ManualDisposal

### Build 811 (Jun 14, 2021)

**Breaking Changes**

- Frame.CalculateChecksum() uses a shared serializer by default, which means no allocs, but it is no longer safe to call the method from worker threads for frames from the same simulation. To disable this behaviour, pass QuantumGameFlags.DisableSharedChecksumSerializer in QuantumGame.StartParameters.Flags. Alternatively, use Frame.CalculateChecksum(bool) overload

**What's New**

- Frame.CalculateChecksum(bool), where the parameter controls whether the shared serializer is used (not thread safe) or not (thread safe)

**Changes**

- Frame.CalculateChecksum can now use shared frame serializer - pass "true" as the first parameter to enable this feature (not thread-safe)

**Bug Fixes**

- Fixed: Collections of structures no longer allocate on serialization
- Fixed: Memory allocation resulting from collections using non-static delegates

### Build 808 (Jun 11, 2021)

**Changes**

- 2D and 3D Physics Engines will log a warning and not run if the frame Map asset is null or invalid

### Build 807 (Jun 10, 2021)

**Bug Fixes**

- Fixed: `QuantumStats` prefab adding a new `UnityEngine.EventSystem` even if one already exists in the scene, causing a spam of warnings on newer Unity versions
- Fixed: QuantumStats prefab displaying the outgoing traffic in the 'Network In' field, instead of the incoming, and no value in the 'Network Out' field
- Fixed: An issue in the Quantum Navmesh off-mesh link auto correction when importing a Unity navmesh which caused the correction to be unreliable

### Build 798 (Jun 08, 2021)

**Breaking Changes**

- We upgraded the `PhotonHivePlugin.dll` used by the Quantum plugin to version 1.1.0.24499. For Quantum Cloud customers nothing changes but Enterprise customers that want to run this new version need to upgrade their private cloud to Photon Server v5 RC1 (https://doc.photonengine.com/en-us/server/current/plugins/plugins-whats-new#plugins_api_version_upgrade)

**What's New**

- FPQuaternion.SlerpUnclamped, Slerp version that does not clamp the interpolation factor
- Added .gitignore file templates to the SDK package

**Changes**

- Updating Quantum Custom Plugin SDK to Photon Server Plugin SDK v5-0-12-24499-rc1

**Bug Fixes**

- Fixed: FPQuaternion.Lerp is now equivalent to Unity's Quaternion.Lerp, i.e. it interpolates towards negative 'target' if the dot product between the quaternions is negative

### Build 793 (Jun 07, 2021)

**Changes**

- QuantumEditorGUI performance improvements

### Build 792 (Jun 03, 2021)

**Changes**

- QuantumToolbarUtilities disabled for Unity 2021.1 until a way to fix it is found

### Build 791 (Jun 02, 2021)

**Bug Fixes**

- Fixed: Unity 2020.2 disappearing Compound Shapes array workaround
- Fixed: Gizmos error when MapData is addressable
- Fixed: A typo in tools/codeintegration_unity/README.md

### Build 790 (Jun 01, 2021)

**What's New**

- FP and FPVector property context menu to copy Raw values into the clipboard

**Changes**

- Console.Runner and Console.Spectator project now depend on the quantum.code project and the Quantum dlls from the assemblies folder instead of the Unity dlls. If the Create Spectator button in Unity fails try replacing SolutionDir variable in the quantum.code.csproj PostBuildEvent

**Bug Fixes**

- Fixed: Issues in the continuous collision detection of Physics Bodies with Compound shapes

### Build 789 (May 31, 2021)

**Changes**

- FP property drawers usage of PropertyScope improved

**Bug Fixes**

- Fixed: An issue that was causing Physics Bodies with Compound shapes to have only half of gravity and applied forces integrated into the body velocity
- Fixed: MapNavMeshRegion Cost property not being editable

### Build 788 (May 27, 2021)

**Changes**

- Removed the initialTick parameter from the  `DeterministicSession.Join()` signature, because it is already passed into the constructor as part of the `DeterministicSessionArgs`

**Bug Fixes**

- Fixed: An issue that could lead to `NavmeshPathfinder` agents become stuck at the last waypoint before the target
- Fixed: An issue that could result in the `NavmeshSteeringAgent` jumping between 3D platforms when using the movement type `Transform` and the vertical positioning type `Navemesh`

### Build 787 (May 26, 2021)

**What's New**

- Frame.Unsafe GetPointerSingleton and TryGetPointerSingleton taking System.Type argument instead of being generic
- Frame.RemoveSingleton(System.Type)

### Build 786 (May 25, 2021)

**Breaking Changes**

- The class `SessionContainer` has been refactored. Adapt changes by fixing the `obsolete` warnings and use explicit start methods `StartReplay()` or `StartSpectator()`  or use the `SessionContainer` class from the `Quantum.Legacy` namespace

**What's New**

- Quantum Spectator project - a headless connected Quantum simulation. Read the quantum_code/quantum.console.spectator/readme.md file how to use and set up

**Changes**

- Setting LoadBalancingPeer.SentCountAllowance by default to 9, which plays better with the timeout detection in Photon Realtime 4.1.6.0
- Removing all Debug.Draw code from release dlls
- Updated Photon Realtime Version 4.1.6.0 (19. May 2021) (please delete the old chm file (4-5-1) by hand)

**Bug Fixes**

- Fixed: The initial clock guess when running Spectator mode and making the offset configurable by DeterministicSession.SpectatingOffsetSec

### Build 785 (May 21, 2021)

**Bug Fixes**

- Fixed: An issue in the navmesh steering agent waypoint detection axis that prevented it to work properly in Quantum 2.1

### Build 783 (May 21, 2021)

**Bug Fixes**

- Fixed: An issue on the map data baking of 2D static polygons with rotation

### Build 781 (May 21, 2021)

**Bug Fixes**

- Fixed: An issue in the collision detection of 2D and 3D entities with CCD enabled that could cause ghost collisions and callbacks

### Build 776 (May 19, 2021)

**Bug Fixes**

- Fixed: An issue when detroying the entity owner of the callback flags during its OnExit physics callbacks

### Build 770 (May 18, 2021)

**Bug Fixes**

- Fixed: An issue that could cause a crash inside the `Navmesh.LineOfSight()` method due to an infinite loop

### Build 769 (May 17, 2021)

**Bug Fixes**

- Fixed: AssetRef drawers don't fallback to Asset Base when an abstract asset is used

### Build 768 (May 13, 2021)

**Bug Fixes**

- Fixed: Lacking of support to FPBounds3 in the code-gen interpreter and BitStream serialization
- Fixed: Issues in the serialization of FPBounds2 and FPBounds3 structs

### Build 767 (May 11, 2021)

**Changes**

- Increased component limit from 192 to 256
- Triangles in QuantumStaticMeshCollider3D are now marked as non-serializable. Gizmos for static meshes are now drawn from the map triangle data

### Build 766 (May 10, 2021)

**What's New**

- Support to 2D and 3D toggleable Static Colliders (all types), configurable on the Editor and toggleable in runtime with 'SetStaticColliderEnabled' in the respective physics API. Breaking

**Changes**

- Rebake all maps to upgrade existing 3D toggleable mesh/terrain colliders

**Bug Fixes**

- Fixed: An issue in the collision check against 3D trigger meshes that was causing false-positives

### Build 765 (May 08, 2021)

**What's New**

- 2D and 3D KCC components now can use Broad-phase queries by calling 'AddBroadPhaseQuery' from a system running prior to the Physics
- Support to 2.5D Vertical Transform to the 2D KCC methods
- Support to Continuous Collision Detection on 3D Physics Engine, which can be enabled on the SimulationConfig and the PhysicsBody3D Config flags. Rebake all scenes to upgrade existing Body prototypes' version

**Changes**

- Reduced the default Hard and Soft Shape Cast Tolerances to 0.01 and 0.05, respectively, reflecting improvements in the algorithm

**Bug Fixes**

- Fixed: 3D Shape Casts hitting mesh triangles' back face

### Build 764 (May 07, 2021)

**Bug Fixes**

- Fixed: An issue in the 2D CCD algorithm that could cause tunneling when the objects were already overlapping at the beginning of the time-step
- Fixed: DumpFlag_PrintRawValues to enable raw printing, not the other way around

### Build 762 (May 06, 2021)

**What's New**

- DumpFlag_PrintRawValues: pass it to Frame.DumpFrame to avoid FPs being pretty-printed

### Build 759 (May 05, 2021)

**What's New**

- BitSetSIZE.Length property (returns bit capacity)

**Changes**

- BitSetSIZE can now be checked/modified with instance methods (Set, Clear, IsSet, ClearAll), all the static methods have been deprecated
- Added BitSet instance methods

**Bug Fixes**

- Fixed: An issues with the delta angular velocity applied at 2D Physics' AddLinearImpulseAtPosition and AddLinearImpulse with relative point

### Build 753 (May 04, 2021)

**Changes**

- QuantumEditorGUI.DefaultIncludeChildrenInGetPropertyHeight to true to match UnityEditor.EditorGUI default parameter values better

**Bug Fixes**

- Fixed: 2D and 3D Compound Shapes giving ArgumentOutOfRangeException on the Unity Inspector

### Build 752 (May 03, 2021)

**What's New**

- Navmesh generation can now automatically correct the navmesh link positions to the closest triangle (toggle on LinkErrorCorrection)
- QuantumRunnerLocalDebug.PreloadAddressables - demonstrates a way to preload to preload addressable assets, if Sync Addressables are not an option

**Changes**

- Reduced allocations during navmesh baking
- Navmesh bake mode visual order in the dropdown list

### Build 751 (Apr 30, 2021)

**What's New**

- More CCD settings are now exposed on the SimulationConfig

**Bug Fixes**

- Fixed: Frame Differ dumping the local Session/Runtime configs when a checksum error occured, instead of the instances received from the server and actually used on the simulation

### Build 750 (Apr 29, 2021)

**Bug Fixes**

- Fixed: An issue with the normal and penetration computation of 3D Box-Box collisions

### Build 749 (Apr 28, 2021)

**Changes**

- Optimized the Broad-phase AABBs of 2D Static Polygon entries

### Build 747 (Apr 27, 2021)

**Changes**

- Layers static class and its methods are now obsolete. All functionalities should now be accessed through the Frame.Layers property instead

### Build 746 (Apr 26, 2021)

**Bug Fixes**

- Fixed: An issue with the view interpolation on lockstep simulations (e.g. replays), where the previous verified state was not provided

### Build 745 (Apr 23, 2021)

**Changes**

- 2D Static Polygons now have their baked Position on the map as its Centroid position in world space, and its baked vertices are translated to this reference (re-centered)

### Build 733 (Apr 21, 2021)

**Changes**

- Created EntityViews are now parented under EntityViewUpdater.ViewParentTransform (if one is provided) on CreateView() instead of on CreateEntityViewInstance() to improve division of responsabilities

### Build 731 (Apr 17, 2021)

**What's New**

- API documentation for the 2D and 3D Hit structure of physics queries

**Changes**

- Renamed 2D and 3D Hit.CastDistance field to CastDistanceNormalized, that better represents its functionality

**Bug Fixes**

- Fixed: 2D and 3D ShapeConfig.UserTag field being displayed as read-only on Editor when initialized from a Unity collider source
- Fixed: An issue with 2D Shape Casts involving Circles that could cause hits to be missed
- Fixed: 2D and 3D Ray and Linecast queries now populate the Hit.CastDistanceNormalized field

### Build 730 (Apr 16, 2021)

**Changes**

- Importing Unity Navmesh progress bar cancel-able

**Bug Fixes**

- Fixed: An issue that cause the navmesh generation to fault with an overflow exception when importing degenerate triangles
- Fixed: An issue that could make the Unity navmesh importing hang on "Fix Triangles On Edges"

### Build 729 (Apr 15, 2021)

**Bug Fixes**

- Fixed: Unity 2020.3+ issue where when using QuantumCodeIntegration new generated asset/component scripts would not be referenceable until the next re-import

### Build 727 (Apr 14, 2021)

**Bug Fixes**

- Fixed: Issues when Physics Entries or HitCollection internal buffers needed to be expanded and Broad Phase Queries have been added
- Fixed: An issue in FPCollision.CircleIntersectsAABB that would cause circles with radius 0 (point) inside boxes to not be considered as overlapping

### Build 726 (Apr 13, 2021)

**Bug Fixes**

- Fixed: 2D Physics Bodies having their X velocity being reset when the Y velocity is below the Min Linear Velocity Integration threshold

### Build 725 (Apr 11, 2021)

**What's New**

- 2D Polygons with invalid normals are now shown red on the editor and give warnings when baked

### Build 724 (Apr 07, 2021)

**Changes**

- Codegen header to use <auto-generated> tags

### Build 723 (Apr 06, 2021)

**What's New**

- Transform2D.TransformPoint, TransformDirection and their respective inverse operations

### Build 722 (Apr 06, 2021)

**What's New**

- Support to Continuous Collision Detection on 2D Physics Engine, which can be enabled on the SimulationConfig and the PhysicsBody2D Config flags. Rebake all scenes to upgrade existing Body prototypes' version
- Derived structs get decorated with DerivedStructAttribute and implement IDerivedStruct<T> attribute

### Build 721 (Mar 31, 2021)

**Changes**

- Custom plugin project will init PhotonDeterminstic logging (in addition to Quantum logging)

### Build 720 (Mar 27, 2021)

**Bug Fixes**

- Fixed: 2D Physics's collision manifolds not being ignored if an involved entity has its collider disabled during a physics callback

### Build 719 (Mar 25, 2021)

**Bug Fixes**

- Fixed: BitSet.ClearAll methods for sets greater than 64 bits not resetting the entire buffer
- Fixed: Generated code for BitSets with a size that is greater than and not multiple of 64 not having a correctly sized fixed buffer
- Fixed: Joining a session with Spectate mode resulted in exceptions, now the mode will set the local player count to 0
- Fixed: Debug log of duplicated asset paths

### Build 718 (Mar 24, 2021)

**What's New**

- Quantum.StartParameters now have explanatory comments

**Bug Fixes**

- Fixed: QuantumEditorGUI for Unity 2021.1
- Fixed: Missing `MemoryLayoutVerifier.Platform` initialization (MemoryLayoutVerifier.DefaultPlatform()) inside SessionContainer.Start()

### Build 717 (Mar 22, 2021)

**Bug Fixes**

- Fixed: Custom plugin simulation stalling if the session tryied to advance the clock more than it had inputs for

### Build 716 (Mar 19, 2021)

**Bug Fixes**

- Fixed: InvalidOperationException on the Frame Differ when trying to differ the dump of a single frame, which can also happen while other clients' dumps have not been received yet
- Fixed: ArgumentNullException on console runner if no checksum file is provided

### Build 713 (Mar 17, 2021)

**What's New**

- [EmitFixedArray] attribute - can be applied to array<T>[N] fields to force the FixedArray<T> proxy properties being generated, even for integer types

**Bug Fixes**

- Fixed: Custom Plugin sample, now disposing the session container in OnCloseGame instead of in BeforeCloseGame, so the simulation is still available during EmptyRoomTTL

### Build 711 (Mar 15, 2021)

**What's New**

- XML API documentation files alongside core and PhotonDeterministic dlls (assemblies folder). If you don't want them to be copied into the Unity Quantum assemblies folder add this line to each configuration property group (debug, release) in your quantum.code.csproj `<AllowedReferenceRelatedFileExtensions>.pdb</AllowedReferenceRelatedFileExtensions>`

**Changes**

- AssetDB is now exposed in the Frame Context

### Build 710 (Mar 13, 2021)

**Bug Fixes**

- Fixed: NullReferenceExceptions when a client gets disconnected by the server after his local session is created and before it is started
- Fixed: 2D and 3D physics bodies not being awakened in a collision if no impulse was necessary to solve it

### Build 709 (Mar 12, 2021)

- Updated release history format

**Bug Fixes**

- Fixed: 2D and 3D physics bodies not having their linear and angular velocities reset when put in a sleeping state

### Build 707 (Mar 11, 2021)

**Changes**

- FixedArray indexer now returns a reference, so explicit copies or GetPointer are no longer needed to modify a nested field

### Build 706 (Mar 10, 2021)

- Upgraded Photon Realtime to version 4.1.5.1

**Breaking Changes**

- The new Realtime version restricts access to the auth token. As a guideline reconnecting after losing the connection object should always pass through the name server again

**What's New**

- A system to track the player connection state (add PlayerConnectedSystem to your SystemSetup.cs) to trigger PlayerConnected and -Disconnected signals
- BitSet static class with IsSet, Set, Clear and ClearAll overloads for each BitSetSIZE
- Local frame snapshots during reconnecting in the demo menu
- StartGameTimeout to QuantumRunner params (optional). This can be used to mitigate issues when players late-join or reconnect while there is no other client or server to provide a snapshot

**Changes**

- BitSetSIZE IsSet, Set, Clear and ClearAll are now generated as obsolete
- The demo menu scene UIConnect class by moving code into helper classes to make the connection flow more clear

**Bug Fixes**

- Fixed: A typo in QuantumToolbarUtilities code preventing the toolbar from working

### Build 705 (Mar 09, 2021)

**What's New**

- `QuantumMapDataBakeFlags.ClearUnityNavMesh` to optionally reset the Unity navmesh after baking. This solves issues with wrongly converting the Unity scene asset to binary using ForceText asset serialization

### Build 703 (Mar 08, 2021)

**Changes**

- Events raising methods now return an event instance (or null, if the event has been culled). This makes setting fields added to events with partial classes easier
- List, dictionaries and Ptr fields are now nullified on component being removed (after ISignalOnComponentRemoved<T> has been invoked). This includes fields that nested structs and arrays a component might have. To avoid this apply [DontClearOnComponentRemoved] attribute on a field
- Ptr is now serializable

**Bug Fixes**

- Fixed: Issues with debug drawing Draw.Circle() when using QUANTUM_XY, enabled drawing 2D shapes with 3D positions

### Build 702 (Mar 05, 2021)

**Bug Fixes**

- Fixed: Events not being pooled and allocating with each raise
- Fixed: Frame.Heap.AllocateAndClearPtr returning non-null Ptr values in case it failed to allocate the requested size on the frame heap
- Fixed: Redundant prompts to reload solution when using code integration

### Build 700 (Mar 04, 2021)

**Bug Fixes**

- Fixed: 3D Physics colliders that have a shape with center offset sometimes missing collisions with triangles in a mesh
- Fixed: The centroid computation of 3D compound shapes (also affected dynamic compounds' center of mass)
- Fixed: False-positive component override message and a subsequent crash when materialising a prototype that forces entity pool to grow

### Build 699 (Mar 02, 2021)

**Bug Fixes**

- Fixed: An issue on 2D and 3D regular first-hit-only raycasts and linecasts that could cause the wrong hit to be returned

### Build 698 (Mar 01, 2021)

### Build 696 (Feb 26, 2021)

**What's New**

- DotNetTaskRunner for simulation processing on the plugin and console runner
- QuantumMultiClientRunner.InitialPlayerCount - a way to kick-start multi-client runner with a number of players

**Changes**

- Core and PhotonDeterministic dlls paths of the custom plugin solution now point to the Unity folder, this way changing between debug and release dlls on the local plugin project is possible by recompiling the code solution
- Events are now confirmed/cancelled in the order they have been raised. Non-synced duplicated events (i.e. raised from the same tick, with the same parameters) still have their handler and confirmation/cancellation invoked once - for the first instance

**Bug Fixes**

- Fixed: An issue with Photon Server Settings Editor that did not save changes to PlayerTTL only
- Fixed: QuantumToolbarUtilities occasional error on startup

### Build 692 (Feb 24, 2021)

**Changes**

- QuantumEditorSettings.EntityComponentInspectorMode default value to InlineInEntityPrototypeAndHideMonoBehaviours

### Build 691 (Feb 23, 2021)

**Changes**

- EntityPrototype and EntityView editors - more consistent with other editors when dealing with prefabs

### Build 688 (Feb 22, 2021)

**What's New**

- DSL keyword enum_count: enum_count<EnumType> can be used as a constant (for an array size etc.)
- FrameSerializer.PointerResolve(Ptr*, int) that can be used to resolve pointers used in components

**Bug Fixes**

- Fixed: QuantumStaticMeshCollider3D & QuantumStaticTerrainCollider3D are now properly marked dirty after a bake

### Build 687 (Feb 19, 2021)

**Changes**

- Quantum Inspector can now edit multiple objects

**Bug Fixes**

- Fixed: Systems inside SystemMainThreadGroup or SystemGroup not having OnInit/OnEnabled callbacks called

### Build 686 (Feb 18, 2021)

**Bug Fixes**

- Fixed: An issue on the inertia matrix computation of 3D bodies with compound shapes that could cause them to not rotate on collisions
- Fixed: The missing GenerateAssetDB flag when running Bake All Scenes Map Data from the Quantum Unity menu

### Build 683 (Feb 17, 2021)

**Changes**

- The default name for the asset db to db.json (was assetDB.json) for the replay and savegame shortcuts

**Bug Fixes**

- Fixed: 2D and 3D collision solving of dynamic colliders with compound shapes
- Fixed: Unresolved pointers error when deserializing a frame with compound shape buffers tracked for disposal

### Build 678 (Feb 15, 2021)

**What's New**

- [FreeOnComponentRemoved] attribute initial work

**Bug Fixes**

- Fixed: ArrayLengthAttribute did not work in some cases

### Build 673 (Feb 12, 2021)

**Changes**

- The implementation of FPCollision.ClosestDistanceToTriangle to support queries for tiny and huge triangles by reducing the precision for them

**Bug Fixes**

- Fixed: An accuracy issue in the 2D Box-Circle narrow check that could result in false positives with slightly negative penetrations, throwing assertion errors in Debug mode

### Build 672 (Feb 11, 2021)

**What's New**

- FrameBase.Set method overloads accepting AssetRefEntityPrototype

**Changes**

- QuantumAutoBaker better error handling

**Bug Fixes**

- Fixed: An issue where adding [Serializable] attribute in DSL resulted in compile error
- Fixed: An issue with FPCollision.ClosestDistanceToTriangle that could cause a div by zero exception on tiny triangles
- Fixed: Displaying name of Config flags field of PhysicsBody components on entity prototypes
- Fixed: QUANTUM_ADDRESSABLES properly stripped from a package
- Fixed: Removed BOMs from merged scripts

### Build 668 (Feb 10, 2021)

**Changes**

- FrameBase.Set(EntityRef, EntityPrototype) and FrameBase.Set(EntityRef, EntityPrototype, out ComponentSet) now invoke ISignalOnEntityPrototypeMaterialized
- Unity QuantumCallbacks' constructors have been made public

**Bug Fixes**

- Fixed: An issue QuantumStateInspector would not refresh GUI when stepping frame-by-frame
- Fixed: Inertia computation of sphere bodies that could cause issues when rotating on the Z or X axis

### Build 667 (Feb 09, 2021)

**Changes**

- Warning when FindAsset encounters an asset type mismatch

**Bug Fixes**

- Fixed: 2D and 3D PhysicsCallbacks and PhysicsJoints components printing the full internal buffers on the State Inspector or on frame dumps instead of only the used count
- Fixed: ArrayLength attribute gets applied on arrays even if a field is hidden
- Fixed: Navmesh gizmo triangles and Pathfinder Gizmos from the QuantumEditorSettings for QUANTUM_XY

### Build 665 (Feb 05, 2021)

**Bug Fixes**

- Fixed: Issues with using cached physics static data when starting an online game from a local snapshot that uses a different Map than the one the simulation starts with

### Build 664 (Feb 04, 2021)

**Bug Fixes**

- Fixed: An issue where having singleton components on scenes would raise occasional exceptions. Singletons can be removed/destroyed and then created again without committing frame commands
- Fixed: Possible DivideByZeroException on raycast-sphere checks when the ray length is too small
- Fixed: QuantumStateInspector issue where components filters were not applied on script recompilation
- Fixed: QuantumStateInspector issue where exceptions thrown by the state object inspector would mess up the entire UI
- Fixed: QuantumStateInspector issue where lists with elements removed were triggering an assertion
- Fixed: Wrong info on physics callbacks when an entity was involved in multiple OnEnter/OnExit conditions in the same frame

### Build 660 (Feb 03, 2021)

**Changes**

- Upgrade_instructions to clear up the instructions about changes in the Unity project editor folders

### Build 659 (Feb 02, 2021)

- Improved QuantumStaticMeshCollider3D.Bake() by reducing the number of Unity Mesh property calls

**What's New**

- Custom Quantum Plugin API documentation

**Changes**

- There's an implicit limit of max allocation (64kB), regardless of the page size. Improved exception message if that error is reached

**Bug Fixes**

- Fixed: Possible null ref exception on custom plugin

### Build 656 (Feb 01, 2021)

- Removed AssignEntityRefs prototype creation step. From now on entities are mapped during Materialization step

**What's New**

- ComponentTypeNameAttribute to handle component type selection more easily in the editor

**Changes**

- ComponentTypeSetSelector and ComponentTypeSelector use component type name instead of Assembly Qualified Name. The old field has been made obsolete, but still works
- JsonAssetSerializerBase detects if a type is from quantum.code assembly and uses a short name in that case
- Dictionary inspector for prototypes. An error icon is shown if there are duplicate keys. Keys are inlined and made read-only for folded elements

**Bug Fixes**

- Fixed: Emit custom attributes for dictionaries

### Build 653 (Jan 29, 2021)

**Bug Fixes**

- Fixed: 2D and 3D Physics Solvers' accumulative impulse when colliding with several entries

### Build 651 (Jan 28, 2021)

- Removed PhysicsSandbox.qtn missing file from the SDK package (DEV only)

**What's New**

- Embedded asset db file loading to the custom plugin (will be documented in upcoming plugin docs revision)

**Changes**

- Generated Asset scripts fully qualify the type of their Settings field to avoid possible conflicts. Cherry pick of 72fdb0af48b6e2080c1663c1b79dfbc84ebd925e
- RangeDrawer to RangeAttributeDrawer
- Removed special version information from the custom plugin project references

### Build 650 (Jan 27, 2021)

- Removed quantum.console.runner project from the Quantum code solutions, it's still inside the SDK though

**What's New**

- Overloads to 2D Physics API that accept a persistent HitCollection* instead of allocating a temporary one
- Overloads to 3D Physics API that accept a persistent HitCollection3D instead of allocating a temporary one

**Bug Fixes**

- Fixed: 3D Shape Queries with position offset when resolving against the 3D Scene Mesh
- Fixed: CircleCast->Circle and SphereCast->Sphere checks when the casted shape had position offset
- Fixed: Line endings in Quantum AOT

### Build 649 (Jan 26, 2021)

- Removed Navigation.Contants.VelocityObstacleTruncationFactor and moved it to the navigation part in simulation config

**What's New**

- Print support for dictionaries
- Prototypes are correctly generated for types containing dictionaries (Unity inspector is a bit lackluster at the moment)
- Partial method UnityDB.LoadAssetResourceContainerUser - a way to change where AssetResourceContainer is loaded from. If not implemented, it is loaded as a Resource from QuantumEditorSettings.AssetResourcesPathInResources). Renamed: UnityDB.ResourceManager to UnityDB.DefaultResourceManager (the old property is still available, but made obsolete)
- QuantumEvent/Callback.Subscribe overload that takes an array of game modes

**Changes**

- AutoMenu to start the map right away if there is only one to chose from

**Bug Fixes**

- Fixed: Warning in Quantum Unity scripts emitted from UnityInternal
- Fixed: Issue on the trigger detection between physics colliders with compound shapes and trigger static meshes
- Fixed: Unity 2020.2.2 reflection error for LayerMatrixGUI.DoGUI

### Build 644 (Jan 21, 2021)

**Bug Fixes**

- Fixed: An issue where [Reorderable] array would not expand in Unity 2020.2

### Build 637 (Jan 18, 2021)

- Initial release

**Bug Fixes**

- Fixed: Inspector for arrays in Unity 2020.2: reorderable lists are simply not compatible with Quantum Editor GUI and hence have been disabled for Quantum types for now

# 2.0.4

## F1

### Build 982 (Feb 11, 2022)

- Added warning message when setting a 2D or 3D Physics Collider physics material to an invalid asset
- Fixed `FP.FromString` returning wrong values when providing strings with more than 14 digits of precision of the fraction part
- Fixed an issue on 2D and 3D KCCs that could cause the penetration correction to push the character further inside the collider in case the contact point was past the character center in the normal direction
- Fixed an issue on the client simulator that would cause the input polling for a given frame to be skipped or polled in duplication when the input offset increased or decreased, respectively
- Fixed an issue on the de-serialization of multiple Commands of the same type on the same frame
- Fixed Arrays not being displayed correctly in Unity 2020.3.24+ and 2021.2
- Fixed issues on the 2D and 3D Physics engines when the session is initialized with `RuntimeConfig.Map` as default or invalid
- Fixed issues when enabling toggleable mesh colliders that were initialized as disabled, expanding internal buffers in the process, which could corrupt memory and cause crashes

# 2.0.3

## F1

### Build 903 (Sep 29, 2021)

- Added ChecksumErrorFrameDumpContext - a way to include user data in case of a checksum error
- Added DumpFlag_AssetDBChecksums - print asset db checksums in the frame dump
- Added Frame.DumpFlag_AssetDBChecksum - a flag that, if passed to Frame.DumpFrame, prints out checksums of all the assets in the AssetDB
- Added QuantumRunnerLocalDebug.PreloadAddressables - demonstrates a way to preload to preload addressable assets, if Sync Addressables are not an option
- Added SimulationConfig.ChecksumErrorFrameDumpOptions
- Added SimulationConfig.ChecksumErrorFrameDumpOptions - if set to SendAssetDBChecksums, checksum error frame dumps will contain checksums for each asset in the AssetDB
- Added support for subclassing non-abstract asset types. 
- Added the option to configure the server input buffer and history sizes when running a custom plugin
- Fixed an issue whit Filters of a single component type returning entities that had said component removed while the removal was not committed in memory
- Fixed FPQuaternion.Lerp and LerpUnclamped are now equivalent to Unity's Quaternion counterparts, i.e. interpolate towards negative 'target' if the dot product between the quaternions is negative
- Fixed fully disabled legacy server support on the Quantum custom plugin SDK
- Fixed missing FPMatrix2x2 serialization code
- Fixed Quantum simulation trying to advance even if the runner was Paused (e.g. waiting for a snapshot), which caused callbacks like `UpdateView` and `PollInput` and `SimulateFinished` to get called
- Fixed QuantumStats prefab displaying the outgoing traffic in the 'Network In' field, instead of the incoming, and no value in the 'Network Out' field
- Fixed StackOverflowException when using cyclic references in DSL. Name of the reentered type is printed in the error message instead
- Fixed type mismatch between `BitStream.WriteStringGZip` and `.ReadStringGZip` serialization code that could corrupt the de-serialized data
- Fixed Unity codegen issue: generic asset types can be derived from
- Fixed Unity codegen issue: generic asset types no longer require `[AssetObjectConfig(GenerateLinkingScripts = false)]` attribute
- Changed logging meaningful errors during LUT initialization and asset db loading on the custom plugin SDK
- Changed upgraded Photon Realtime to version 4.1.6.7, please read `Assets/Photon/PhotonLibs/changes-library.txt` and `Assets/Photon/PhotonRealtime/Code/changes-realtime.txt` for changes
- Removed `Assets/Photon/PhotonLibs/WebSocket` folder please delete it manually, websockets are included in the netstandard libraries 
- Removed old Realtime sample `Assets/Photon/PhotonRealtime/Demos` 
- Removed old Realtime changelog `Assets/Photon/PhotonLibs/release_history.txt`

# 2.0.2

## F2

### Build 857 (Aug 05, 2021)

- Fixed fully disabled legacy server support on the Quantum custom plugin SDK

## F1

### Build 777 (May 20, 2021)

- Fixed 2D and 3D physics bodies not having their linear and angular velocities reset when put in a sleeping state
- Fixed 3D Broad-phase Shape Overlaps missing hits on static mesh triangles
- Fixed 3D Physics colliders that have a shape with position offset sometimes missing collisions with triangles in a mesh
- Fixed always initializing the SessionContainer Log for console even when running it from the plugin (now optional)
- Fixed an issue in FPCollision.CircleIntersectsAABB that would cause circles with radius 0 (point) inside boxes to not be considered as overlapping
- Fixed an issue when destroying entities during OnExit physics callbacks and the destroyed entity is the owner of the callback flag (info.Entity)
- Fixed an issue where memory had to be over-allocated to avoid crash on Android running on ARMv7
- Fixed an issue with the normal and penetration computations on 3D Box-Box collisions
- Fixed an issue with the view interpolation on lockstep simulations (e.g. replays), where the previous verified state was not provided
- Fixed ArgumentNullException on console runner if no checksum file is provided
- Fixed AssetRef drawers don't fallback to Asset Base when an abstract asset is used
- Fixed generated code for BitSets with a size that is greater than and not multiple of 64 not having a correctly sized fixed buffer
- Fixed BitSet.ClearAll methods for sets greater than 64 bits not resetting the entire buffer
- Fixed Custom Plugin sample now disposing the session container in OnCloseGame instead of in BeforeCloseGame, so the simulation is still available during EmptyRoomTTL
- Fixed custom plugin simulation stalling if the session tried to advance the clock more than it had inputs for
- Fixed debug log of duplicated asset paths
- Fixed events not being pooled and allocating with each raise
- Fixed false-positive component override message and a subsequent crash when materializing a prototype that forces entity pool to grow
- Fixed Frame Differ dumping the local Session/Runtime configs when a checksum error occurred, instead of the instances received from the server and actually used on the simulation
- Fixed Frame.Heap.AllocateAndClearPtr returning non-null Ptr values in case it failed to allocate the requested size on the frame heap
- Fixed InvalidOperationException on the Frame Differ when trying to differ the dump of a single frame, which can also happen while other clients' dumps have not been received yet
- Fixed Issues in the serialization of FPBounds2 and FPBounds3 structs
- Fixed Lacking of support to FPBounds3 in the code-gen interpreter and BitStream serialization
- Fixed issues when Physics HitCollection internal buffer needed to be expanded when using Broad Phase Queries
- Fixed missing `MemoryLayoutVerifier.Platform` initialization (MemoryLayoutVerifier.DefaultPlatform()) inside SessionContainer.Start()
- Fixed missing Task Runner for simulation processing on the plugin and console runner, now using DotNetTaskRunner
- Fixed NullReferenceExceptions when a client gets disconnected by the server after his local session is created and before it is started
- Fixed printing a QList<T> could result in an error if an element has been removed
- Fixed QuantumStaticMeshCollider3D & QuantumStaticTerrainCollider3D are now properly marked dirty after a bake
- Fixed Triangles in QuantumStaticMeshCollider3D are now marked as non-serializable to avoid resource files bigger than necessary. Gizmos for static meshes are now drawn from the map triangle data
- Fixed StateInspector error occurring when a removed component type was used in a filter
- Fixed systems inside SystemMainThreadGroup or SystemGroup not having OnInit/OnEnabled callbacks called
- Fixed unresolved pointers error when de-serializing a frame with compound shape buffers tracked for disposal
- Changed AssetDB is now exposed in the Frame Context
- Changed Increased component limit from 192 to 256

# 2.0.1

## F1

### Build 684 (Feb 18, 2021)

- Added FrameSerializer.PointerResolve(Ptr*, int) that can be used to resolve pointers used in components
- Fixed an issue where having singleton components on scenes would raise occasional exceptions. Singletons can be removed/destroyed and then created again without committing frame commands
- Fixed displaying of 2D and 3D Shape Type as flags on Unity 2020.2+ Inspector
- Fixed Frame dumps differing between different culture variants (this would not cause a desync)
- Fixed issue on the trigger detection between physics colliders with compound shapes and trigger static meshes
- Fixed issues with using cached physics static data when starting an online game from a local snapshot that uses a different Map than the one the simulation starts with
- Fixed occasional unresolved pointers error when using compound shapes made of more than 4 shapes
- Fixed possible DivideByZeroException on raycast-sphere checks when the ray length is too small
- Fixed wrong info on physics callbacks when an entity was involved in multiple OnEnter/OnExit conditions in the same frame
- Changed Generated Asset scripts fully qualify the type of their Settings field to avoid possible conflicts
- Changed There's an implicit limit of max allocation (64kB), regardless of the page size. Improved exception message if that error is reached

# 2.0.0

Quantum 2.0 is a brand new engine, so we recommend the developer to start by reading this document (also included in the SDK): quick-start-guide.md

Because the internal the sub-systems (navigation, physics, etc) and its components were either kept or evolved from the versions found in 1.2.4.x, all release notes from previous versions are included bellow.

**Breaking Changes:**

We merged the code and systems project into a single csproj called `quantum.code` :o

Migrate your project by copying the `quantum.code` folder from the **SDK** and copy all of your custom files (from state and systems) into that project: Add the new code project to your Visual Studio solution and drag drop the files there. Also copy your *.User files and CommandSetup.cs and SystemSetup.cs. Afterwards you can delete the state and systems projects completely.

We combined all source code provided with the SDK that is inside quantum code solution into a single file called `Core.cs` to make the upgrade more managable in the future (e.g. adding and removing files).

## F1

### Build 640 (Jan 20, 2021)

- Fixed displaying of 2D and 3D Shape Type as flags on Unity 2020.2+ Inspector

### Build 634 (Jan 18, 2021)

- Changed SDK marked as stable (F) release

## RC2N

### Build 631 (Jan 15, 2021)

- Fixed the PhotonServerSettings Editor setting Port to 0 when using the Cloud App Settings button

### Build 630 (Jan 14, 2021)

- Fixed raycast-sphere accuracy issue when the ray length was very large relative to the sphere radius

- Fixed an issue with the deserialization of the Frame metadata that could cause checksum errors

### Build 627 (Jan 13, 2021)

- Fixed Custom Plugin package missing 'CustomQuantumServer.cs' file

### Build 624 (Jan 08, 2021)

- Fixed OnExit callbacks being called even if the entity was destroyed in another OnExit callback

### Build 620 (Jan 06, 2021)

- Fixed access to PathFinder data via the Navitation API by adding GetPathFinderData(frame)

### Build 599 (Dec 21, 2020)

- Fixed an issue with navmesh baking when using non-square grid sizes and the FindClosestTriangleCalculation.SpiralOut setting

### Build 596 (Dec 19, 2020)

- Added to FrameThreadSafe API: GetPointerSingleton<T> and TryGetPointerSingleton<T>
- Added to FrameThreadSafe API: Number, IsPredicted, IsVerified and TryGet<T>
- Fixed An error where Quantum.FramePrinter.PrimitivePrinter<T> was missing with some AOT builds. (Cherry picked 4f4fb82ff7cfb07f7d61e381a35aef955f86a9f0)
- Fixed thread-safety of FilterStruct<T> and ComponentGetter<T> methods
- Changed the EntityViewUpdater to optinally parent views under ViewParentTransform

### Build 593 (Dec 17, 2020)

- Fixed QDictionary failing to remove an entry if its hash code was negative

### Build 591 (Dec 16, 2020)

- Removed the docs folder and the quickstart guide. Please refer to the online docs. Moved the API doc CHM file to the root folder

### Build 590 (Dec 15, 2020)

- Fixed memory leak when running the simulation on the server with the custom plugin sample

### Build 588 (Dec 14, 2020)

- Fixed desync when initializing multiple sessions with different layer configs or when receiving a different SimulationConfig from the server
- Changed OnGameStart callback, now called before system's OnInit

### Build 586 (Dec 11, 2020)

- Added read-only access to EntityViewUpdater members for derived classes
- Fixed an issue where migrated assets where net set dirty during the 2.0 migration

### Build 584 (Dec 10, 2020)

- Fixed FilterStruct attempt to iterate through entities that were destroyed, but have data still lingering in component buffers

- Exposed Filter, FilterStruct and ComponentGetter in FrameThreadSafe API

### Build 581 (Dec 08, 2020)

- Fixed issues when a 2D or 3D KCC center was inside a box, which could produce zeroed penetration correction

### Build 579 (Dec 04, 2020)

- Fixed issue in the Task System, when in a multithreaded context, that could cause tasks to be skipped and/or worker threads to get stuck in loops

### Build 577 (Dec 03, 2020)

- Fixed issue when starting a local game from a snapshot and having Min Input Offset greater than zero
- Fixed issue when starting an online game from a local snapshot that could cause the simulation to halt

### Build 575 (Dec 02, 2020)

- Fixed inlined prototype components have correct header color when dark theme is enabled in Unity < 2019.3
- Changed locale dependent <auto-generated> section is removed from CodeGen.cs

### Build 574 (Dec 01, 2020)

- Fixed an issue in Quantum Auto Baker that caused generated data being lost by setting MapData itself dirty after running the BakeMap step

### Build 572 (Nov 30, 2020)

- Fixed the default capacity of some internal buffers not being compatible with the default managed heap size, giving "Allocation too large" errors

### Build 570 (Nov 27, 2020)

- Added configurable modes on Simulation Config for commiting destroy/remove commands on memory
- Fixed checksum errors when removing a component from and destroying an entity in the same frame
- Fixed issue with Instant Replays when having Min Input Offset greater than zero
- Fixed issues when deserializing a frame data into another, which could cause memory leaks in the frame's managed heap
- Fixed possible DivideByZeroException on ray-triangle narrow check

### Build 567 (Nov 20, 2020)

- Fixed dynamically added Assets not being retrieved when searched from tasks running in a multithreaded context
- Fixed physics bodies being awakened rigth after being put to sleep in some collision configurations

### Build 566 (Nov 19, 2020)

- Fixed a bug where prototype's EntityRefs were not fully assigned if it had a struct containing an array
- Fixed an issue with navmesh Unity import introduced in build 533 by providing an explicit epsilon for FixTrianglesOnEdges. Default should be float.Epsilon
- Fixed physics broadphase queries missing trigger colliders when callbacks are being called
- Changed AssetDB constructor is now public, allowing for custom IResourceManager implementations

### Build 565 (Nov 18, 2020)

- Fixed an issue with navmesh agent config settings DynamicLineOfSightWaypointRange where the set units were not triggering the line of sight test
- Changed LocalInput subscribes to CallbackPollInput in OnEnable instead of start

### Build 563 (Nov 17, 2020)

- Fixed an issue in navmesh agent that could cause agents with MovementType DynamicBody to circle around waypoints
- Fixed unnecessary predicted frame simulation when running on Local mode
- Changed ResourceManagerStatic & ResourceManagerStaticPreloaded allow for null or empty paths

### Build 562 (Nov 16, 2020)

- Added AssetGuid.None const field (equals Invalid)
- Fixed Asking the user for scene save confirmation when opening a scene through the Quantum toolbar
- Fixed issues when performing queries after changing the frame Map asset
- Changed EntityViewEditor so it will excecute for derived EntityView classes as well

### Build 560 (Nov 12, 2020)

- Added shapes' UserTag field to 2D and 3D shape configs, configurable on entity prototype
- Added shapes' UserTag field to the query Hit, CollisionInfo and TriggerInfo APIs

### Build 556 (Nov 11, 2020)

- Fixed 2D and 3D PhysicsBody's Inertia being reset before Center of Mass if both flags are set, inducing a deslocated CoM on shapes with position offset

### Build 554 (Nov 09, 2020)

- Fixed 2D and 3D CompoundShape.RemoveShapes infinity looping when not passing any UserTag parameter
- Fixed 3D Physics bucketing and sorting in the (X, Y) instead of the (X, Z) axes in the broad phase and hurting performance

### Build 551 (Nov 05, 2020)

- Fixed 2D and 3D KCCs missing collisions with circles and sphere, respectively

### Build 548 (Nov 04, 2020)

- Fixed glitchy behavior on Entity Views when playing online and having Input Offset Min greater than 0
- Fixed simulation stalling when playing a local game with Input Offset Min greater than 0

### Build 546 (Nov 02, 2020)

- Fixed Unity 2020.1 nested assets not being visible on starting Unity
- Changed enumeration value of DefaultAssetGuids.Max to 256

### Build 543 (Oct 29, 2020)

- Fixed 2D and 3D KCC raw movement's GroundedNormal not being set
- Fixed Assets being detected as nested in Unity 2020.1

### Build 540 (Oct 27, 2020)

- Fixed an issue that caused the Quantum debug gizmos to flicker under Unity 2019
- Fixed and issue when changing the frame Map that could cause 3D meshes not to be loaded
- Fixed issues on OnEnter/OnExit collision callbacks that could cause misbehaviors when using prediction culling or changing map assets

### Build 537 (Oct 23, 2020)

- Fixed crash when pathfinding with NavMesh Agents on iOS builds

### Build 536 (Oct 22, 2020)

- Fixed 2D and 3D queries done outside of the valid physics region causing errors. Common case: KCC falling infinitely
- Fixed QDictionary serialization

### Build 535 (Oct 21, 2020)

- Fixed wrong collision normal computations on sphere-box collisions when the sphere center was inside the box

### Build 533 (Oct 20, 2020)

- Fixed an issue that the navmesh edit mode gizmo was not rendered in some reload cases
- Fixed an issue where the ClosestTriangleCalculation navmesh settings was not used after importing the Unity navmesh
- Fixed an issue where wrong navmesh borders could be generated  due to accuracy with 3D navmeshes

### Build 532 (Oct 19, 2020)

- Fixed AssetDB not refreshing properly on Unity 2020
- Fixed AssetResourceContainer.Groups being initialized in OnEnable
- Fixed issue when baking entity colliders from Unity circle and sphere colliders: making a prefab out of the Entity prototype will no longer zero the baked radius

### Build 529 (Oct 13, 2020)

- Fixed a precision issue in the 2D Solver that could cause wrong tangent impulses in almost-frontal collisions

### Build 528 (Oct 12, 2020)

- Fixed 'EntityView.OnEntityInstantiated' callback now is called after the instance is added to EntityViewUpdater active views
- Fixed ambiguous reference when using Optional attribute in DSL
- Fixed parse error when using DrawIfCompareOperator and DrawIfHideType parameters with DrawIfAttribute in DSL

### Build 525 (Oct 07, 2020)

- Added API documentation from the Quantum code solution to PhotonQuantum-Documentation.chm
- Fixed 3D physics queries performed before the first Update corrupting memory when checking the scene mesh triangles

### Build 524 (Oct 06, 2020)

- Fixed issue with compound colliders triggering OnEnter/OnExit callbacks if some shapes were overlapping and some were not
- Exposed HitCollection and HitCollection3D .Add methods

### Build 519 (Oct 05, 2020)

- Fixed an issue where the first waypoint of the navmesh agent  pathfinder was corrupted which affected the agent behaviour only marginally but was visible when debugging the waypoints

### Build 517 (Oct 01, 2020)

- Fixed "Quantum/Open Quantum Project" not working with solution paths containing spaces

### Build 514 (Sep 30, 2020)

- Fixed callbacks from Events raised on systems' OnInit having a Game with null frames

### Build 509 (Sep 28, 2020)

- Fixed static mesh baking: degenerate triangles with zeroed normals are now removed

### Build 507 (Sep 25, 2020)

- Fixed an issue in the penetration correction of physics bodies that could cause slight miscorrections

### Build 506 (Sep 24, 2020)

- Fixed systems' OnInit now being called if session started from a locally saved snapshot

### Build 504 (Sep 23, 2020)

- Fixed 3D Physics assertion error when having 3D compound colliders and collision callbacks are called

### Build 500 (Sep 18, 2020)

- Exposed a default Layer Mask in the 2D and 3D KCC config assets that can also be overhauled through code
- Fixed an issue in the physics callbacks when starting a game from a locally-saved snapshot
- Changed Frame Events are now invoked after OnUpdateView

### Build 497 (Sep 17, 2020)

- Fixed 'Command without RPC data' issue when predicting inputs for a remote player that had sent a command
- Fixed 2D and 3D Physics collision callbacks, so that any modification done during callbacks have immediate effect
- Fixed an issue when initializing a physics scene map with no colliders and a null static colliders array
- Fixed Auto Build feature not handling 'Generate Asset DB' flag

### Build 496 (Sep 16, 2020)

- Fixed issues when the default static colliders capacity of the physics engines was not enough and had to be expanded

### Build 493 (Sep 15, 2020)

- Fixed Bug where TryGet and TryGetPointer would return true if component had been removed but not deleted from internal data buffer
- Fixed local runner "Save And Reload" exception for scene prototypes

### Build 489 (Sep 12, 2020)

- Fixed 2D and 3D KCC thread-safety issues
- Fixed memory leaks when temp-allocating through the FrameContext from multiple threads
- Fixed NavMeshAgent thread-safety issue when using Character Controller movement type

### Build 488 (Sep 11, 2020)

- Fixed 3D box-triangle narrow collision check edge case that could generate a collision without contact points
- Fixed [ExcludeFromPrototype] when applied on EntityRef field sometimes caused a compile error in CodeGen.cs

### Build 481 (Sep 09, 2020)

- Fixed an issue when destroying entities with OnEnter/OnExit collision callback flags set during physics callbacks
- Fixed null pointer exceptions when pathfinding with a NavMeshAgent

### Build 479 (Sep 08, 2020)

- Added 'Button' (with capital B) as a supported type in the DSL, in addition to 'button'
- Added FPQuaternion.FromToRotationSkipNormalize, a faster version of FromToRotation that skips the normalization of the input parameters
- Fixed Menu asked for AppIdRealtime even if the PhotonServerSettings was set to use LocalMasterServer
- Fixed QuantumJsonSerializer.cs was not included in the CustomPlugin zip
- Changed FPQuaternion.FromToRotation to normalize the input parameters by default, avoiding precision issues

## B2N

### Build 476 (Sep 07, 2020)

- Added an overload to the contact point iterator on collision callbacks that exposes the contact normal
- Fixed an issue where scene prototypes didn't show up in replays
- Fixed an issue with the Input Provider used in replays when not initialized from the simulation starting frame

- Fixed an issue where NavMeshSteeringAgent_Prototype overrides were ignored

### Build 471 (Sep 04, 2020)

- Added FP now has % and / operators for FPHighPrecisionDividers Tests: added FPHighPrecisionTests
- Added FPMath.SinHighPrecision and FPMath.CosHighPrecision. Internal: Added FPHighPrecisionDivisor Tests: Added FPMath trig absolute error tests
- Fixed FP._1_33 and FP._1_99 are fixed to be in line with FP._0_33 and FP._0_99

- Added HeapExtraCount added to StartParameters
- Added Log LoaderExceptions in case ReflectionTypeLoadException happens in quantum.codegen.unity.host
- Added QuantumGame.GetInstantReplaySnapshots - a way to get a range of instant replay snapshots
- Added QuantumInstantReplay is now rewindable (depending on parameters)

### Build 468 (Sep 03, 2020)

- Fixed HitDynamics and HitKinematic query options being swapped for regular queries resolution

- Added IsCulled method to the Frame thread safe API

### Build 465 (Sep 02, 2020)

- Fixed Quantum/Generate Math Lookup Tables used an invalid path

### Build 463 (Sep 01, 2020)

- Fixed an issue in 3D Physics Bodies with compound colliders that overlapped with each other that could cause cyclic references

- Fixed Replay buffer is now cleaned up on resync
- Removed obsolete fields from 2D and 3D PhysicsBody prototypes

- Changed Moved QuantumGame into Quantum namespace

- Added enumerator to QDictionary<K, V>
- Added QtnWatcher prints error if fails to compile qtn
- Added quantum.codegen prints errors in VisualStudio/MSBuild friendly way
- Fixed An issue where Addressable assets used AssetPath instead of address in UnityResourceLoader
- Fixed An issue where resyncing caused simulation to halt
- Fixed Frame can now be copied between runners
- Fixed Quantum in release mode is now fully non-alloc, including DeterministicSession and networking
- Fixed quantum.codegen prints error to stderr
- Fixed Resync memory leak
- Changed removed 'Send Rate' configuration option, renamed 'Send Staggering' to 'Send Redundancy'

### Build 458 (Aug 31, 2020)

- Added enumerator to QDictionary<K, V>
- Fixed An issue where Addressable assets used AssetPath instead of address in UnityResourceLoader
- Fixed An issue where resyncing caused simulation to halt
- Fixed Quantum in release mode is now fully non-alloc, including DeterministicSession and networking
- Changed removed 'Send Rate' configuration option, renamed 'Send Staggering' to 'Send Redundancy'
- Renamed ChecksumFrameBufferSize to ChecksumSnapshotHistoryLengthSeconds (in SimulationConfig)
- Added InstantReplaySettings to QuantumRunner.StartParameters and all local runners - a new way to configure instant replay.
- Removed BufferSizeSec from QuantumInstantReplayDemo, as instant replays are now configured with QuantumRunner.StartParameters

### Build 455 (Aug 28, 2020)

- Breaking Change: Asset Resource Container format has changed, it needs to be rebuilt (Quantum -> Generate Asset Resources)
- Fixed an issue that could corrupt 3D mesh and triangle collision manifolds in frames where the internal buffers needed to be expanded
- Fixed FilterStruct 'without' and 'any' component sets being swapped
- Changed UnityResourceLoader implementation to a more extensible one (composite). See AssetResourceContainer_Resources.cs for a sample.
- Added Addressables support (experimental). Enabled in Quantum Editor Settings. Since Quantum requires assets to be readily available, assets need to be either preloaded or Sync Addressables (https://github.com/Unity-Technologies/Addressables-Sample/tree/master/Advanced/Sync%20Addressables/Assets/SyncAddressables) need to be used.
- Fixed an issue where QuantumRunner used UnityDB to load SimulationConfig instead of a passed IResourceManager

### Build 452 (Aug 26, 2020)

- Fixed an issue with the sleeping detection of entities that did not collide with other colliders

### Build 448 (Aug 25, 2020)

- Fixed 2D Linecast queries not using specified vertical position and height
- Fixed a bug in UnityResourceLoader causing undefined behavior if there were multiple Unity resources with the same name

### Build 447 (Aug 24, 2020)

- Fixed 2D Raycast queries not using specified vertical position and height
- Fixed Task runner being destroyed when scene changes

### Build 438 (Aug 22, 2020)

- Improved Physics engines will no longer move entity Transforms outside the FP usable range or give errors when entities move outside the valid physics area

### Build 437 (Aug 21, 2020)

- Improved 2D and 3D collision solver stability when using minimum linear/angular velocities

### Build 436 (Aug 20, 2020)

- Fixed DivideByZero exception in FPVector2.Angle and FPVector3.Angle when using very small vectors

### Build 435 (Aug 19, 2020)

- Fixed a DivideByZero Exception on FPCollision.LineIntersectsCircle if the line start and end points are the same or slightly different
- Fixed a NullReferenceException in the Map Gizmos if the 3D Physics system was disabled

- Added GetInertia method to 2D and 3D Physics bodies
- Fixed an issue where PrototypeMaterializationContext used ComponentTypeIndex incorrectly

### Build 432 (Aug 18, 2020)

- Fixed build events on platforms other than Windows use mono explicitly

### Build 431 (Aug 17, 2020)

- Fixed when ENABLE_VSTU is not defined, QuantumEditorSettings.MergeWithVisualStudioSolution is no longer ignored

### Build 429 (Aug 15, 2020)

- Fixed an issue with the penetration correction of 3D box-triangle collisions

### Build 428 (Aug 14, 2020)

- Added QuantumEditorSettings.FPDisplayPrecision - an ability to control FP rounding in the inspector

### Build 427 (Aug 13, 2020)

- Fixed an issue in the narrow phase resolution of trigger mesh collisions that could cause a null pointer in the sphere-triangle check
- Improved body-mesh collision solving

### Build 426 (Aug 12, 2020)

- Added HostProfiler.StartDebug HostProfiler.EndDebug
Merge branch '2.0/feature/entity-prototype-ref-unity' into 2.0/develop

### Build 425 (Aug 11, 2020)

- Fixed an issue with the expansion of static components buffers in the physics engines
- Fixed an issue with trigger mesh collision checks that could result in other non-trigger meshes not being checked
- Changed experimental smoothed sphere-mesh collision option: removed from Simulation Config and now available per-collider in static meshes and terrains
- Changed Quantums task system now uses unity job system native threads instead of mono threads

### Build 422 (Aug 06, 2020)

- Added a Jumped property to 2D and 3D KCC APIs, true when Jump is called and consumed in the default steering method

### Build 421 (Aug 05, 2020)

- Fixed an issue in the Frame Printer (state inspector) that could cause invalid pointers de-referencing in union-like structs
- Fixed ComponentPrototypeRef array index mismatch for deserialized frames

### Build 418 (Aug 04, 2020)

- Added AddForceAtPosition and AddLinearImpulseAtPosition to 2D and 3D physics body APIs
- Fixed regular queries with HitDynamics flag disabled checking against entries with disabled physics bodies

- Improved physics entry creation task performance

### Build 414 (Jul 31, 2020)

- Changed the 2D collision info contact points API, now consistent with its 3D counterpart. Check the API docs for details

### Build 410 (Jul 30, 2020)

- Changed the 3D collision info API, better adapting to the new internal structure of the mesh triangle collisions. Check the API docs for details

### Build 407 (Jul 28, 2020)

- Fixed an issue with FPVector3.Angle that could result in a wrong angle if the vectors were equal or opposite to each other
- Fixed DivideByZeroException when resolving 3D raycast broad phase queries with shallow angles

### Build 406 (Jul 27, 2020)

- Fixed an issue with FPVector2.Angle that could result in a wrong value if the vectors are opposite to each other
- Fixed ArgumentOutOfRange is no longer thrown in EntityViewUpdater if MapEntityLink has an out of range index; error message is logged instead

### Build 404 (Jul 24, 2020)

- Added 'OnBeforeBakeNavMesh' and 'OnBakeNavMesh' to the map data baking callbacks
- Added QDictionary indexer
- Fixed an issue with sphere-box collisions when the sphere center was inside the box
- Fixed QDictionary error when adding a key-value pair after removing another
- Fixed Upon deserializing, DynamicAssetDB sets _nextGuid correctly

### Build 403 (Jul 23, 2020)

- Added smoothed sphere-mesh collisions mode, available under SimulationConfig.Physics.Experimental section
- Fixed error when trying to deserialize remote player's command without RPC data in predicted frames
- Fixed FPVector2, FPVector3 & FPQuaternion drawers now support narrow mode
- Fixed Labels for AssetRefs restored

- Added Applying [ExcludeFromPrototype] on a component in qtn will prevent a prototype for this component from being generated

### Build 401 (Jul 22, 2020)

- Added Transform2D.Create, for API consistency
- Improved 3D mesh collision solving
- Changed Map physics settings gizmos to a more pleasant scale
- Deprecated 2D and 3D CollisionInfo.ContactPoint, use ContactPointAvg or ContactPoints instead

- Fixed No more "using UnityEditor;" in EntityComponentBase.cs

### Build 398 (Jul 21, 2020)

- Added DumpFlag_NoDynamicDB & DumpFlag_NoRuntimePlayers frame dump flags
- Added Frame.FrameDump dumps dynamic db bytes FrameDiff: Binary diff up and working
- Added RepalceTypeHintAttribute - a new way of replacing a specific field/type on Unity's side for prototypes
Merge branch '2.0/feature/frame-diff-binary' into 2.0/develop
- Changed the order in which the map baking steps are performed when baking all: map static colliders are baked first, followed by the Nav Meshes
- Exposed utility methods for importing a Unity NavMesh, accessible through MapNavMesh.ImportUtils
Merge branch '2.0/feature/replace-type-hint' into 2.0/develop

### Build 397 (Jul 20, 2020)

- Fixed Dynamic Asset DB deserialization preserves guids
- Fixed Dynamic Assets can be inspected in the State Inspector
- Fixed static collider gizmos not matching the baked values when a parent of the GO has a non-uniform scale
- Fixed Unity 2020 PrefabStage.prefabAssetPath warning removed

### Build 395 (Jul 17, 2020)

- Fixed PhysicsBody3D prototype version number on EntityPrototype not being correctly updated after upgrade
- Fixed Qtn syntax array<asset_ref<EntityPrototype>>[N] doesn't emit a duplicate AssetRefEntityPrototype struct

### Build 394 (Jul 16, 2020)

- Added implicit operator from QDictionary to QDictionaryPtr
- Added New entity component inspector mode: InlineInEntityPrototypeAndHideMonoBehaviours (accessible with EntityComponentInspectorMode property, formerly UseInlineEntityComponents)
- Added Single-line drawers for FPVector2, FPVector3 and FPQuaternion
- Fixed inline EntityPrototype editor glitches got rid of for Unity >= 2019.3
- Fixed serialization of LayerMask utility struct

### Build 393 (Jul 15, 2020)

- Added a flag in the Physics Body config that signalizes if a sleeping body can be awakened by added forces (true by default)
- Added A new way of extending EntityComponent* editor - implement OnInspectorGUI, guarded by #if UNITY_EDITOR block
- Added Added UseInlineEntityComponents to editor settings: enables experimental inlined view for entity components in EntityPrototype
- Added CallbackPollInput.IsFirstInThisUpdate property added
Merge branch '2.0/feature/inline-component-prototypes-editor' into 2.0/develop
- Fixed Baking maps can be performed and is consistent with multiple scenes open
- Fixed Physics queries missing hits when performed outside of the world size, in the sorting axis
- Removed optional parameter for awakening sleeping bodies when adding forces. Use the IsAwakenedByForces flag in the body config

### Build 392 (Jul 14, 2020)

- Fixed QuantumTaskProfiler binary save (".dat") restored

### Build 391 (Jul 13, 2020)

- Fixed editing a prefab variant in the prefab stage doesn't raise an error
- Fixed error when disabling physics bodies during a Trigger callback

- Added optional boolean parameter to wake physics bodies up when adding impulses, force or torque to it

- Added QBoolean.ToString() that prints true or false
- Fixed arrays of empty components are now serialized by Unity
- Fixed DrawIf now works for arrays
- Fixed EntityViews are correctly reassigned on map restart

## A1N

### Build 384 (Jul 08, 2020)

- Added Frame.DumpFrame accepts flags, at the moment one is supported: DumpFlag_NoHeap (used by ChecksumErrorFrameDump)

### Build 383 (Jul 07, 2020)

- Removed deprecated 2D and 3D PhysicsBody Create methods, replaced with CreateKinematic and CreateDynamic
- Removed deprecated 2D and 3D PhysicsCollider compound API, replaced by compound Shape API
- Removed deprecated 2D and 3D PhysicsCollider Create methods, replaced by overload with Frame parameter
- Removed deprecated Shape3DConfig.CreateShape method, replaced by overload with Frame parameter

### Build 378 (Jul 03, 2020)

- Fixed added Obsolete attribute to LocalInput to get rid of a warning
- Fixed an issue in the Physics Callbacks that was causing Dynamic/Trigger Static Exit callbacks not to be called

### Build 375 (Jul 01, 2020)

- Fixed bitsets can now be used in qtn without [ExcludeFromPrototype]

### Build 373 (Jun 29, 2020)

- Fixed an issue with the Quantum simulator that was causing prediction error interpolation not to be applied in the EntityView

### Build 371 (Jun 26, 2020)

- Added SetInertia to 2D and 3D Physics Bodies API

### Build 369 (Jun 25, 2020)

- Fixed 2D peemptive raycast first-hit-only query now correctly returns only the closest hit in the resultant collection
- Fixed a racing condition on the multithreaded resolution of preemptive compound shape overlaps

- Added ClearForce and ClearTorque API to 2D and 3D Physics Bodies
- Map grid config has been split between Physics and NavMesh settings, which also have separate gizmos that can be toggled in the map draw mode
- Physics scenes default capacities are now exposed in the Simulation Config, with more settings also available in the Map assets

### Build 367 (Jun 24, 2020)

- Fixed QuantumGameGizmos no longer throw an exception if not using NavigationSystem

### Build 366 (Jun 23, 2020)

- Added a Penetration field to 2D Hits, filled when a shape overlap has the ComputeDetailedInfo flag set
- Fixed an issue in the box-edge collision check that could cause the box to get stuck
- Fixed double lookup in UnityResourceLoader.FindAssetBase got rid of
- Improved EntityView now considers any Transform2DVertical components the entities might have on 2.5D
- Improved the computation of angular impulses by the 2D Physics Solver

### Build 364 (Jun 22, 2020)

- Fixed Not calling AssetBase.OnInspectorGUIAfter fixed
- Improved 2D Physics Solver impulses computation

### Build 362 (Jun 20, 2020)

- Added 2D and 3D compound shapes, which can be created both through code or Editor and used on physics colliders
- Added support for performing regular and preemptive overlap queries with 2D and 3D compound shapes
- Fixed ResourceManagerStatic won't go into infinite when an asset attempts to load itself in `AssetObject.Loaded`
- Changed 2D and 3D Physics Body configs, wrapping them into a single flag enum. Old body prototype fields are deprecated and all configs are translated into flags upon upgrading
- Changed 2D and 3D Physics Collider Create method. Previously existing one is deprecated and replaced by an overload that receives a Frame object as parameter in order to support creating colliders from compound shapes

### Build 358 (Jun 18, 2020)

- Fixed migration tool from 1.2.4.x to 2.0 not creating the default assets with the expected Guids
- Improved 1.2.4.x to 2.0 migration tool filtering of old scripts and handling serialization of nested arrays and lists

### Build 351 (Jun 16, 2020)

- Added QuantumEditorSetting.AutoRunQtnCodeGen - set it to true to have the codegen run as soon as .qtn files change
- Fixed Nullable properties look right in 2019 now
- Fixed Physics Body 2D and 3D allowing to set a body without mass as non-kinematic

### Build 350 (Jun 15, 2020)

- Fixed Transform2D_Prototype now stores rotation as degrees Renamed: EulerAnglesAttribute -> DegreesAttribute DegreesAttribute put on built-in rotation Unity-visible fields & codegen Drawers/inspector for shapes updated to take offsets into account

### Build 348 (Jun 12, 2020)

- Added Post-build codegen raises an error if an asset is not declared in qtn

- Added Automatic, server-side handling of client-based snapshots (late-joins and reconnects only require client to join room, and start QuantumRunner)

### Build 346 (Jun 11, 2020)

- Added non-generic System methods on Frame
- Fixed an issue with the component buffer's memory allocation when removing all instances of a component after adding at least one

### Build 345 (Jun 10, 2020)

- Fixed EntityViewUpdater correctly actives inactive scene entities
- Improved ray-triangle intersection point accuracy for 3D raycast queries

### Build 344 (Jun 09, 2020)

- Added a 'IgnoreCollision' property to the 2D and 3D collision callbacks info

### Build 342 (Jun 08, 2020)

- Fixed DivideByZeroException when resolving 3D raycast queries with small rays relative to the map cell size

### Build 340 (Jun 05, 2020)

- Fixed a deallocation issue that could happen when loading a map without 2D or 3D static colliders
- Fixed angular velocity being integrated into an entity rotation with freeze rotation flags if the velocity was manually set
- Changed setting a dynamic physics body IsAwakenedByKinematics property now only takes effect if the body is first allowed to sleep

### Build 338 (Jun 04, 2020)

- Fixed an issue in the 3D broad phase that could cause a collision between two dynamic bodies to be computer as a trigger collision
- Fixed an issue with 3D elongated boxes sometimes missing collisions with triangles
- Fixed assertion in the 2D and 3D Physics broad phases that could occur when having a trigger collider with static trigger callback flags set
- Improved 3D collision solver impulses computations
- Improved the inertia computation of 3D boxes

- Fixed empty list containing entity_refs no longer triggers an assertion
- Fixed null pointer de-allocation in the 3D Physics disposal
- Changed Allowed invalid entity ref/components on a lot of methods entity methods without throwing exceptions

### Build 336 (Jun 03, 2020)

- Fixed preemptive physics queries with 'HitTriggers' flag set not checking trigger entries
- Improved 2D and 3D physics performance by avoiding trigger checks when entries don't have respective callback flags set

### Build 334 (Jun 02, 2020)

- Added AssetBase now has two virtual methods OnInspectorGUIBefore and OnInspectorGUIAfter to hook into quantum asset editor GUI for quick inspector tooling
- Added FP raw constants made public and grouped in FP.Raw static class
- Added FPQuaternion.IsIdentity and FPQuaternion.IsZero
- Added Prototypes can be extended with partial classes and MaterializeUser partial method
- Fixed disable entity views for map entities that never existed
- Fixed don't check for orphaned map entity views every frame
- Improved the performance of the 3D broad phase collision check in the triangle soup
- Changed AssetBase is now partial

### Build 331 (Jun 01, 2020)

- Fixed 3D sphere-shaped bodies inertia computation
- Improved 2D bodies and 3D sphere bodies inertia computation

### Build 329 (May 28, 2020)

- Added UseCulling property on SystemMainThreadFilter<T>

- Fixed AssetRefDrawer doesn't use ResourceManager to show AssetRefs

### Build 325 (May 27, 2020)

- Added a IsAwakenByKinematics field to 2D and 3D physics bodies that determines if a sleeping dynamic body can be awakened by other kinematic bodies or colliders
- Added a Mass property to the 2D and 3D physics bodies, which can be changed in runtime after a body is created
- Added back support to 2D and 3D kinematic physics bodies. Use CreateDynamic/Kinematic instead of Create (obsolete) and/or set the body IsKinematic flag for changing the body stats
- Added SystemMainThreadFilter<T> that takes a filter struct an allows you to implement Update(Frame f, ref T filter)
- Fixed Ptr.Serialize method now has the proper void* argument

### Build 324 (May 26, 2020)

- Fixed Destroy and Remove commands not being commited in between systems' OnInit and OnEnabled
- Fixed GetAsset from worker thread needs to wait for Disposing state as well
- Fixed invalid Ptr de-referencing by the physics callbacks
- Fixed physics colliders not awakening sleeping bodies if colliding with them in some cases
- Improved 2D and 3D physics penetration correction, specially noticeable in 3D collisions with triangle mesh
- Improved box-triangle narrow collision detection for small scale entries
- Changed When an EntityRef is used as input it will now only serializes itself if there's an entity specified to save bandwidth

### Build 323 (May 25, 2020)

- Fixed upgrade issue by restoring TerrainColliderData.cs as an empty file

### Build 321 (May 23, 2020)

- Fixed GameObjectNameIsEntityRef is now applied properly to entities baked into the map also
- Changed QantumGame.Frames.Current is now obsolete

### Build 319 (May 22, 2020)

- Fixed an issue in the narrow collision check between 3D trigger entities and mesh triangles
- Fixed heap will now correctly detect when an invalid Ptr is being de-referenced
- Fixed task context will now detect invalid scheduled tasks and report errors
- Fixed 2D and 3D shapes not updating their broad radius when fields were changed
- Fixed an issue in the collision exit callbacks where it could still be called if the other entity was destroyed in a previous frame
- Fixed an issue where a 3D Physics body could still rotate even if having rotation freeze flags enabled
- Fixed an issue where regular queries could return hits with entities that have been destroyed after the physics update and before the current system
- Changed 2D and 3D Physics Collider's shape to be a readonly property. To set a new shape to a collider, use the SetShape method in the collider API

### Build 317 (May 21, 2020)

- Changed 2D and 3D KCC raw movement computation to use the config radius extent for grounded state detection. This doesn't affect the default steering, but, if using a reasonably small extent value, can help stabilizing the KCC Grounded state.

### Build 316 (May 20, 2020)

- Added a first-hit-only parameter to 2D and 3D preemptive raycast API (AddRaycastQuery/AddLinecastQuery), false by default

### Build 314 (May 19, 2020)

- Fixed an issue with 2D and 3D shape overlaps where, in some situations, the hit EntityRef could be None even in overlapping a dynamic entity

### Build 313 (May 18, 2020)

- Fixed memory alignment for DSL unions
- Fixed sort order on fields in generated Serialize method
- Changed 2D and 3D KCCs raw accumulated correction computation, fixing an issue specially noticeable when steering over 3D meshes

- Added RequireComponent attribute can now be used on entity_ref fields in qtn; unlike when used on a type, it only works when one type is specified
- Added RequireComponent attribute: gets translated to Unity's RequireComponent for Unity prototype components. Also attributes are copied in much simpler (and correct) way during Unity's codegen, but they don't support nested types, which are kind of wrong if made public to begin with. So DrawIf enums got evicted from DrawIfAttribute and live in the namespace now
- Fixed Unions support "(None)" choice

### Build 310 (May 17, 2020)

- Fixed an issue with the 2D and 3D KCCs that could cause position correction overshooting. More noticeable in the 3D KCC when using a higher count of contact points
- Changed the default number of max contact points in the 3D KCC config default asset from 2 to 4

### Build 308 (May 15, 2020)

- Added a GetAllQueriesHits method for getting all preemptive queries results. Check the API documentation in the docs folder for more details
- Added a UserTag integer field for 2D and 3D Joints
- Fixed a name mismatching issue with the map data baker if using QUANTUM_XY directive
- Fixed a very rare bug where player data would be overwritten locally on one client as the session was starting
- Fixed Prototypes with entity_refs now have custom attribute support
- Changed the 2D and 3D Joints API. Check the API documentation in the docs folder for details and examples on how to use it

### Build 304 (May 14, 2020)

- Added a penetration correction factor to the 2D and 3D KCC config assets
- Added Asset Database can be deserialized in replay/save game runners
- Fixed an issue with the default KCC steering method that was clamping the vertical velocity of the character if it was moving and then jumped
- Fixed an issue with the default KCC steering method that was making the character jump with a slightly lower impulse than the one set in the jump
- Changed 2D and 3D Character Controller APIs. Check the API documentation in the docs folder for details and examples on how to use it
- Changed 2D and 3D HitCollections .Reset methods accessibility to public, useful when reusing permanent collections

### Build 301 (May 13, 2020)

- Added Implemented a new frame dumper which provides complete printing of all frame state

### Build 298 (May 12, 2020)

- Added Added f.Unsafe.ComponentGetter<T>() which is the single target version of f.Unsafe.FilterStruct
- Added EntityView now sets the name of the spawned gameobject to EntityRef.ToString()
- Added Log.Debug with [Conditional("DEBUG")] attribute for use in user code
- Added support to querying the 2D and 3D physics scenes from systems' OnInit that are scheduled to run after the physics systems initialization (only statics are loaded at this point)
- Fixed another overflow exception when running the Asset Migration tool after running the play mode in 1.2.4 projects caused by not respecting the NonSerialized field attribute
- Fixed the `Import From Unity` button on the `NavMeshDefinition` inspector, the Unity navmesh import was not saved to the definition members
- Improved the navmesh gizmo rendering performance by creating and caching the draw data (for edit and play mode)
- Removed the `Bake Unity Navmesh` button from the MapNavMeshUnity script inspector because it was confusing: the button was only triggering the unity navmesh baking and not the Quantum baking

### Build 297 (May 11, 2020)

- Added support to 2D static edges, also possible to bake from a polygon asset
- Fixed an issue in the 2.0 Asset Migration scripts that could cause an Overflow Exception due to cyclic dependencies in attached Unity Objects
- Fixed an issue that could cause an unhandled exception in the Quantum.Navigation.ActiveVertex class
- Fixed an issue where avoidance was applied to agents that are traversing a link, now they are ingored by avoidance and do not cause other to avoid them

### Build 295 (May 09, 2020)

- Fixed an issue with agents starting off the navmesh and creating a non-optimal waypoint on the nearest active triangle
- Fixed PathQuality Good uses Euclidean distance calculation
- Changed PathQuality Good uses less computations for path-finding

### Build 294 (May 08, 2020)

- Added 2D and 3D Physics callbacks prototypes with standalone components and also integrated into Entity Prototype collider
- Added another NavMeshPathfinder.SetConfig() signature using an asset ref
- Added AutomaticTargetCorrection option to the navmesh agent config, disabling this will fail the path search when selecting a target outside the navmesh
- Added support to minimum angular velocity integration to 2D and 3D Physics, customizable through the SimulationConfig.MinAngularIntegration field
- Fixed 2D and 3D queries throwing errors if the query boundaries were outside the map area
- Fixed an issue that agents are not being avoided when SetTarget has not been called yet
- Fixed an issue that the agent would not fail the pathfinding permanently when the target is outside the navmesh
- Fixed an issue with Navmesh.MovePositionIntoNavmesh and target correction when the agent is inside disabled regions where a disabled border was used
- Changed the NavigationAPI.FindPath() to use the new AutomaticTargetCorrection option as well
- Removed Legacy physics material restitution and friction combine function. Default physics material combine function is now Max
- Removed the ASSET_DATABASE.txt from the Unity Resources folder, it's not needed anymore

### Build 292 (May 07, 2020)

- Fixed 3D bodies rotation flags enum not allowing multiple flags selection on the editor
- Fixed an issue with 3D shapes initialized from a shape config or prototype where the shape rotation offset could be initialized as a zeroed quaternion
- Fixed the static collider data not displaying the correct layer of the object, although the collider itself would be baked and behave as in the correct layer

### Build 289 (May 06, 2020)

- Added Partial support for qtn attributes in prototypes (components with entity_refs ignore most custom attributes)
- Added support to 3D shapes with position and rotation offset and 3D colliders with compound shapes. Check PhysicsCollider3D.AddShape, RemoveShape and GetShapes

- Added a global setting disable avoidance completely (SimulationConfig.Navigation.EnableAvoidance, enabled by default)
- Fixed EntityComponentTransformEditor property path fixed
- Changed Changed the way the resync mechanism works
- Implemented KCC3D movement type for steering agents

- Removed avoidance callbacks
- Removed legacy avoidance type
- Renamed NavMeshAgentConfig.WaypointCount to CachedWaypointCount
- Renamed NavMeshAgentConfig.WaypointDetectionDistance to DefaultWaypointDetectionDistance

### Build 286 (May 05, 2020)

- Fixed removing custom navmesh areas from the Unity project in the SDK

- Added a Stop() method to the pathfinder component
- Added configuration option to create extra heaps on the frame context
- Added new memory stats that shows entity memory used in addition to heap memory used
- Added properly implemented Frame.Free method that releases the Heap back to the Heap group
- Fixed an issue that could cause link regions being omitted from the map link list
- Fixed an issue with the computation of 2D compound shape collider broad radius when the collider root shape has a local transform
- Fixed Changing map while iterating over components doesn't raise an exception
- Changed NavMeshAgentSystem is now named NavigationSystem
- Changed Physics2D, Physics3D and Navigation can now be completely disabled by not having the corresponding system in the system list
- Changed the demo menu code slightly to give better debug output when connecting to a predefined master server and hide the region dropdown in that case

### Build 282 (May 04, 2020)

- Fixed an issue with agents overshooting the target position when stopping distance is too small

- Fixed an issue that MapNavMeshDebugDrawer did not invalidate the cached navmeshes after baking
- Fixed Better handling of lockstep mode in new simualtor
- Fixed free null pointer on 3D Physics
- Fixed free null pointer on physics2d
- Changed inverted the navmesh agent ttl handling, MaxRepathTimeout can now be set to 0 ti disable

### Build 279 (May 03, 2020)

- Fixed calling OnSimulateFinished again
- Fixed InputProviderExtensions.CopyFrom spelling and logic

### Build 276 (May 02, 2020)

- Added Implement foreach support on ComponentIterator<T> and ComponentBlockIterator<T> via duck-typing interface

### Build 275 (May 01, 2020)

**Breaking Changes:**

IAssetDB and Shape2D are no longer necessary on PhysicsBody2D.Create overloads' signatures. Also, make sure the entity has a 2D collider before adding a body component.

- Added support to 2D shapes with position and rotation offset and colliders with compound shapes. Check PhysicsCollider2D.AddShape, .RemoveShape and .GetShapes.

### Build 274 (Apr 30, 2020)

- Added BitStream extensions for serializing all asset refs
- Added Exposed configuration options for entity memory management on SimulationConfig.Entities
- Added f.Unsafe.GetComponentBlockIterator now accepts slicing start index + count
- Added FrameBase.ComponentCount<T>() to get global count for a component type
- Added FrameBase.Create overloads that take entity prototype containers
- Fixed an issue that could cause an exception during the creation of navmesh steering agent component
- Fixed the QUANTUM_ XY handling on the refactored navmesh baking
- Removed all mdb files from the Unity project in the SDK
- Removed Public Create API on EntityPrototypeContainer
- Changed the Navigation.FindPath signature to be more simple
- Changed all Unity meta files and stripped out the inconsistent licenseType information
- SimulationConfig.PenetrationCorrection is now clamped between 0-1 when the asset is loaded, as higher values will cause glitchy behaviors
- Upgraded Photon Photon3Unity3D dll to  version v4.1.4.1
- Upgraded Photon Realtime SDK to version 4.1.4.0

### Build 269 (Apr 29, 2020)

- Fixed an issue with the OnGameDestroyed callback that caused errors due to the order of QuantumCallbacks

- Added a debug visualization for the binary Quantum navmesh `MapNavMeshDebugDrawer`
- Added gizmos for the new navmesh agents (enable in `QuantumEditorSettings.DrawNavMeshAgent`)
- Added new simplified script to define an imported Navmesh `MapNavMeshUnity` as replacement for `MapNavMeshDefinition` and it will not save intermediate data anymore
- Fixed an issue with preemptive queries where some hits could be missed if not selecting all types on query options
- Depricated some methods and classes from the old navmesh baking process (both ways will still work though)

### Build 266 (Apr 28, 2020)

- Added Added IEquatable<T> and == and != operator overloads to asset refs
- Added Added IEquatable<T> and == and != to all asset refs
- Added avoidance obstacle component
- Added Command serializer now available on FrameContext
- Added ComponentFilter<T0> for just one component
- Added f.Assets.View() overload for AssetRefEntityView
- Added Support for C#-style field attributes in .qtn DSL files
- Added TaskProfiler now has "fit" button (above vertical scroll bar)
- Fixed A few visual bugs of TaskProfiler in Unity 2019.3 fixed
- Fixed an issue where sleeping dynamic bodies would not be awakened if being pushed due to position correction
- Fixed an issue with 2.5D Physics where dynamic bodies could collide even if not overlapping vertically if one of them did not have a Transform2DVertical component
- Fixed Baking a new MapAsset for the first time no longer throws an exception
- Fixed Generated assets scripts' new lines are now consistent
- Fixed navmesh definition inspector performance issues
- Fixed navmesh pathfinding waypoint bug randomly sending agents to (0/0) when creating new agents
- Removed old SimulationConfig.Physics.IsMultithreaded, use SimulationConfig.ThreadCount to override the number of threads used

### Build 263 (Apr 27, 2020)

**Breaking Changes:**

Bake all navmeshes again.

The NavMeshAgent component has been split up into different parts. We noticed that developers working with navmesh and steering want to control quite a lot of the final movement result, which makes sense, because it is often so vital to the game experience. The new navmesh agent parts should help developers to easily pick a combination of navmesh support without losing multi-threaded performance and without executing unneeded parts.

**NavMeshPathfinder** has a target position, perfors the actual path-finding, stores a user-defined number of waypoints and detects the waypoint progression.

**NavMeshSteeringAgent** (requires a NavMeshPathfinder component) has max speed, acceleration and rotation speed and steers the entity along the path. Apart from not using this component developers can change the `MovementType` to `Callback` and inject their own movement while having  to date avoidance data.
The speed integration has been changed slightly to work more reliable when angular speed is used. Disable rotation speed and acceleration by setting them to 0.

**NavMeshAvoidanceAgent** (requires both the NavMeshPathfinder and the NavMeshSteeringAgent components) integrates HRVO agent avoidance. Avoidance priorities work now the same way as in Unity. Additionally type and masks can be defined to filter out who can avoid whom.

```csharp
// new agent component creation
var entity = f.Create();
f.Set(c, NavMeshPathfinder.Create(frame, entity, navMeshAgentConfig));
f.Set(entity, new NavMeshSteeringAgent()); // optional
f.Set(entity, new NavMeshAvoidanceAgent()); // optional
```

- The `NavMeshAgentConfig` asset has not changed much and it still includes data for all navigation components
- The pathfinder is the only component that requires an explicit config asset during the creation. The config file, though, is applied to both other components.
- The config can be updated during run-time using `NavMeshPathfinder.SetConfig()` on the pathfinder component
- The number of waypoints stored with the pathfinder can be set under `NavMeshAgentConfig.WaypointCount`
- `NavMeshAgentConfig.AvoidanceRadius` is now only used when `OverrideAvoidanceRadius` is enabled
- `NavMeshAgentConfig.WaypointDetectionDistance` was changed into `EnableWaypointDetection`and two subsequent values (see API docs or tooltips for more information)
- `NavMeshAgentConfig.SteeringCallback` has been removed. Instead the `ISignalOnNavMeshMoveAgent` signal should be used to advance the agent position
- Merged `SimulationConfig.AvoidanceCallbacks` and `SteeringCallbacks` into `NavigationCallbacks`. Reset the value when you are using the callbacks
- Importantly all navigation callbacks are now called from the main-thread and are secure for developers to use

```csharp
// simplified movement callback
public void OnNavMeshMoveAgent(Frame f, EntityRef entity, FPVector2 desiredDirection) {
var agent = f.Unsafe.GetPointer<NavMeshSteeringAgent>(entity);
var transform = f.Unsafe.GetPointer<Transform2D>(entity);
transform->Position = transform->Position + desiredDirection * f.DeltaTime*
transform->Rotation = FPVector2.RadiansSignedSkipNormalize(FPVector2.Up, desiredDirection);
```

- Added a navmesh utility method to generate a random position on the navmesh (FindRandomPointOnNavmesh)
- Added navmesh baking parameter object (MapNavMeshBakeData) to enable custom raw navmesh input data
- Fixed all navigation callbacks to be called from the main thread
- Fixed an issue with navmesh agent start position glitches by using a more elaborate nearest triangle search algorithm
- Fixed compilation errors in the QuantumToolbarUtilities class when using with Unity 2020
- Fixed Scene prototypes can now have views set to assets
- Navmesh links utilize the region system to be toggled on and off on the map level as well for agents. Add a `MapNavMeshRegion` script to the `OffMeshLink` Unity script.
- Removed INavMeshRegionMask interface and replaced it with a NavMeshRegionMask struct that is saved in globals and on the PathfinderAgent

```csharp
// old
f.Map.SetNavMeshRegionActive(f, "secret", false);
// new
var secret = f.Map.RegionMap["secret"];
f.NavMeshRegionMask->ToggleRegion(secret, false);
```

### Build 261 (Apr 24, 2020)

- Fixed an issue with 2D and 3D dynamic trigger callbacks that was making it not to be called in some cases
- Fixed an Unity error pop up when the demo menu is started and the QuantumEditorSettings asset is tried to be loaded
- Fixed JSON.net dll import settings to always use AOT version for any build to mitigate the broken Unity DllImport.defineConstraints
- Fixed TaskProfiler graph initial scale fixed
- Fixed warnings send by Photon Realtime when the QuantumCommunicator tries to leave a room when it has not entered yet
- Removed FrameBase from 2D and 3D Physics Joints and Callbacks API signature

### Build 256 (Apr 23, 2020)

- Added concrete RotationFreezeFlags.None as default flag (it was implicit before)
- Added TaskProfiler shift+wheel increases/decreases graph's maximum value
- Added TaskProfiler source client selection
- Fixed an issue with 3D static colliders data without collider ID and trigger state assigned
- The Core.PhysicsSystem has been split into PhysicsSystem2D and PhysicsSystem3D, and we now have a CullingSystem2D and 3D. All of these can be enabled/disabled at will now.

**Breaking Changes:**

- Renamed `Frame.EntityExists()` to `Frame.Exists()`
- Delete `quantum\_unity\Assets\Photon\Quantum\Assemblies\quantum.state*`
- Delete `quantum\_unity\Assets\Photon\Quantum\Assemblies\quantum.systems*`
- Delete `quantum\_unity\Assets\Photon\Quantum\Editor\TaskProfiler\QuantumTaskProfilerWindow.Data.cs`
- The 2D and 3D physics callbacks systems have been reworked. To upgrade, make sure you:

1) Update the callback **flags** used: 

- The `FrameBase.Physics2D.SetCallbacks(CallbackFlags)` API (as the correspondent on the Physics3D) is still available, but the overload with booleans has been removed.
- Make sure you set the flag for the callbacks you want to receive with bitwise operations.
- All previous flags (Collision, Static, OnEnter, etc) have been replaced by a set of 12 new flags: 3 flags for dynamic collisions (OnDynamicCollision, OnDynamicCollisionEnter, OnDynamicCollisionExit), and, analogously, 3 for static collisions, dynamic triggers and static triggers.

2) Update the callback **signals** used:

- All previous collisions signals have been replaced by 6 for each physics engine.
- For 2D Physics collisions, for example, you now have: ISignalOnCollision2D, ISignalOnCollisionEnter2D and ISignalOnCollisionExit2D. Analogously, you have 3 signals for 2D trigger collisions (OnTrigger2D), and the respective signals on the 3D Physics (just replace 2D for 3D).
- Notice that ISignalOnCollision2D will be called if the entity has the OnDynamicCollision AND/OR the OnStaticCollision flag. Use the `IsStatic` property on the collision info to differentiate between them. This is also true for the trigger signals.
- Last but not least, the generic `CollisionInfo`	struct has been replaced by `CollisionInfo2D` (collision and enter signals), `TriggerInfo2D` (trigger and enter signals), `ExitInfo2D` (exit signals) and their 3D physics respectives.

### Build 253 (Apr 21, 2020)

- Added Added Assets/Create/Quantum/EntityView menu item
- Fixed an issue with the mesh baking process that was causing FPVector3 overflows
- Fixed Assets/Create/Quatum/EntityPrototype menu item now creates a prototype correctly

### Build 249 (Apr 20, 2020)

- Fixed quantum.state.csproj and quantum.core.csproj no longer use $(SolutionDir) in their build events - changed to "$(ProjectDir)\.."

### Build 247 (Apr 18, 2020)

- Fixed issues with the serialization of 2D and 3D Joints

### Build 245 (Apr 16, 2020)

- Added missing SimulationConfig.Physics documentation
- Fixed 2D and 3D PhysicsBody component serialization

### Build 243 (Apr 15, 2020)

- Added a `Use Manifold Normal` option to 2D and 3D KCC config assets and an optional parameter to kcc methods
- Added configurable waypoint count for navmesh agents
- Added Scene context menu items for creating basic entity types Added QuantumShapes2D resource with basic 2D shapes
- Added search assembly settings to QuantumEditorSettings to remove hard-coded assembly names like Assembly-CSharp from the scripts
- Fixed 3D queries not returning the hit penetration
- Fixed issues with the computation of sphere-sphere narrow collision check and its penetration
- Fixed static sphere gizmos drawing when attached to GameObjects with scale different than 1
- Removed unused ReflectionInspector scripts

### Build 242 (Apr 14, 2020)

- Fixed Solution patcher works without Visual Studio Tools for Unity installed
- Fixed an issue where MapNavMeshDefinition import settings where not saved when modified
- Fixed EntityComponentPhysicsCollider2D & EntityComponentPhysicsCollider2D inspector sync with source collider properly
- Removed the map link property from the navmesh asset
- Removed ReplayPlaybackSpeed property from QuantumRunner. Use OverrideUpdateSession as in the InstantReplayDemo

### Build 239 (Apr 11, 2020)

- Added 3D Physics regular and preemptive queries API documentation

### Build 238 (Apr 10, 2020)

- Fixed issue with the error-based rotation interpolation that was causing rotation teleports even with no errors
- Fixed recorded checksum verification issue when checksum interval was different than 1

### Build 237 (Apr 09, 2020)

- Added 2D Physics regular and preemptive queries API documentation
- Fixed all useages of navmesh agent priority to use the same Unity-like logic (Most important = 0. Least important = 99)
- Fixed an issue that generated navmesh regions in a random order
- Removed GetQueryHitCount from 2D and 3D Physics API, use GetQueryHits instead
- Removed support for region control per navmesh object (UseLegacyRegionOffsets)

### Build 235 (Apr 07, 2020)

- Added PhotonNicknamePlusGuid option to ClientIdProvider to mitigate duplicate client id errors when running multiple stand-alone clients that have the same name (read from PlayerPrefs)
- Fixed an issue with NavMeshAgent.IsOnLink() that could cause an exception

### Build 231 (Apr 06, 2020)

- Fixed an issue in AOT file generation when members of different assets have identical names

### Build 227 (Apr 03, 2020)

- Fixed incorrect start and end detection of NavMesh links

### Build 223 (Apr 02, 2020)

- Fixed connecting to local Photon server via the demo menu by supporting older JoinRandom API
- Added Transform3D Unity-like methods More Unity equivalence tests
- Fixed an issue with consecutive navmesh links where the first waypoint was skipped
- Fixed Quaternion multiplication bug fix
- Added automatic changelog generation and publishing for nightly builds

# 1.2.4.5

## F1 (Feb 04, 2022)

- Fixed an issue with the normal and penetration computations on 3D Box-Box collisions.
- Fixed excessive memory allocations due to pre-loading of static Physics broad-phase structures on Map assets.
- Fixed PhysicsSystemBase, now allowing selective calls to 2D or 3D Physics Updates by overrides on PhysicsSystemPre.
- Fixed type mismatch between BitStream.WriteStringGZip and .ReadStringGZip serialization code that could corrupt the de-serialized data.
- Fixed missing support to FPMatrix2x2 in the DSL.
- Fixed an issue on 2D and 3D KCCs that could cause the penetration correction to push the character further inside the collider in case the contact point was past the character center in the normal direction.
- Fixed an issue on the de-serialization of multiple Commands of the same type on the same frame.
- Added the option to configure the server input buffer and history sizes when running a custom plugin.
- Upgraded the custom plugin SDK to Photon Server 5 (version 5.0.12.7770). When upgrading the custom plugin make sure to delete everything inside `Photon-Server` first and then extract the new SDK. Significant changes: New game server plugin config location is `Photon-Server/deploy/LoadBalancing/GameServer/bin/plugin.config`. A license file has be be downloaded from the PhotonEngine dashboard and placed into `Photon-Server\deploy\bin_Win64`. PhotonControl does not have to be used to Set Local Game Server IP any more.

# 1.2.4.4

## F1 (Feb 28, 2021)

- Fixed new Inspector files added on 1.2.4.3 missing from the upgrade package.
- Fixed 2D and 3D physics bodies not having their linear and angular velocities reset when put in a sleeping state.
- Fixed Custom Plugin sample, now disposing the session container in OnCloseGame instead of in BeforeCloseGame, so the simulation is still available during EmptyRoomTTL.
- Fixed an accuracy issue in the normal computation of the 2D box-circle narrow phase.
- Fixed an issue in FPCollision.CircleIntersectsAABB (used by OverlapCircle query) that would cause circles with radius 0 (point) inside boxes to not be considered as overlapping.
- Fixed 2D OverlapCircle queries not checking against static polygons.
- Added missing `UNITY_TVOS` directive when setting the correct Native Library on QuantumRunner.Init.

# 1.2.4.3

## F1 (Feb 04, 2021)

- Fixed static mesh baking: degenerate triangles with zeroed normals are now removed.
- Fixed wrong collision normal computations on sphere-box collisions when the sphere center was inside the box.
- Fixed issues when a 2D or 3D KCC center was inside a box, which could produce zeroed penetration correction.
- Fixed memory leak when running the simulation on the server with the custom plugin sample.
- Fixed Raycast-Sphere accuracy issue when the ray length was very large relative to the sphere radius.
- Fixed EntityRefType.Equals(object other) generated methods not correctly returning true when the objects are equal.
- Changed FPQuaternion.FromToRotation to normalize the input vectors by default, avoiding precision issues.
- Added FPQuaternion.FromToRotationSkipNormalize to the API as a more performant option when vectors are known to be normalized or have magnitude close to 1.

# 1.2.4.2

## F1 (Aug 26, 2020)

- Fixed the BeginLayoutGroup error logged in Unity after pressing Bake in Unity 2019.
- Fixed StaticColliderData not correctly displaying the layer of the object, altough the collider itself would be baked into and behave as in the correct layer.
- Fixed an issue in the KCC steering that was making the character jump with a slightly lower impulse than the one actually set in the jump config.
- Fixed an issue in the KCC steering that was clamping the vertical velocity of the character if it was moving and then jumped.
- Fixed an issue in the KCC raw movement computation that could cause position correction overshooting. More noticeable in the 3D KCC when using a higher count of max contact points.
- Fixed static collider gizmos (2D and 3D boxes and 2D polygons) not matching the baked values when a parent of the GO had a non-uniform scale.
- Fixed an issue with sphere-box collisions when the sphere center was inside the box.
- Fixed an issue with FPVector2 and FPvector3.Angle methods the could cause a wrong angle value if the vectors were opposit to each other.
- Fixed an issue with the penetration correction of box-triangle collisions that could cause over-correction.
- Fixed a DivideByZero Exception on FPCollision.LineIntersectsCircle if the line start and end points were the same or just slightly different.
- Fixed the computation of 2D and 3D dynamic bodies' inertia.
- Fixed NavMeshAgent waypoing flags not being serialized in the frame serialization.
- Improved the 2D and 3D Collision Solvers' computation of normal and tangent impulses.
- Improved ray-triangle intersection point accuracy for 3D raycast queries.
- Improved box-triangle narrow collision detection for small scale entries.
- Improved KCC Grounded state stability by using the Config.Extent radius for ground detection. Movement Type definition has not changed, only considering the contacts inside the main KCC radius.
- Improved Entity Prefab Root: now handling 2D entity views with Transform2D Vertical component (2.5D Physics).
- Added a PenetrationCorrection field to the 2D and 3D KCC config assets, used as a factor to apply the correction in the steering method, also fixing an issue that could cause jittery behavior if the KCC acceleration was higher than the simulation rate.
- Added GetInertia, SetInertia, AddForceAtPosition and AddLinearImpulseAtPosition to 2D and 3D Dynamic Bodies API.
- Added SimulationConfig.MinAngularIntegration that defines a minimum DynamicBody.AngularVelocity value that can be integrated into a Transform.
- SimulationConfig.Physics.PenetrationCorrection is now clamped between 0-1 when the asset is loaded, preventing from glitchy behaviors that higher values would cause.

## RC1 (Apr 22, 2020)

**Breaking Changes:**

The setup of NavMesh regions quickly reaches the 64 count limit when working with multiple navmeshes per map. 
With this update the regions are now merged and saved on the map asset and shared over all navmeshes. The new behavior can be disabled by enabling Map.UseLegacyRegionOffsets.

Re-baking of all maps and navmeshes is required.

Select each agent config in the Editor once to initialize the avoidance radius setting.
UsePhysics has been removed from NavMeshAgentConfig. Set the new option `Move Agent By` to `Transform` (UsePhysics off) or `DynamicBody` (UsePhysics on).

- Fixed navmesh regions with multiple navmeshes in one map. The region names are now merged into one list on the map and are controlled via the map API (SetNavMeshRegionActive).
- Fixed an issue that prevented the navmesh agent steering from being applied to Transform3D or DynamicBody3D and changed the navmesh agent filter to make Transform2D and DynamicBody part of the Any block while also adding the 3D components
- Fixed an issue that caused a glitch in navmesh agent steering (speed was set to 0 for one tick) when reaching a waypoint.
- Fixed an issue that created unnecessary waypoints that were very close together.
- Fixed an issue that caused navmesh agent steering glitches during re-pathing (due to not having a valid target for one or more ticks). An additional waypoint is cached on the agent that is only used during re-pathing.
- Fixed an issue with initial clock-guessing during input-based reconnects.
- Fixed an issue that resets the Quantum AnimatorGraph asset guid when pressing Import.
- Fixed an issue with the index range check done on Map.GetStaticCollider3D.
- Fixed an issue that caused 3D ray casts not to consider the layer mask when checking against static meshes.
- Fixed an issue with the AOT file generation when member have the same names.
- Fixed DynamicBody3D.Torque not being reset every tick by the 3D Physics engine.
- Fixed an issue with the rotation interpolation that was causing rotation teleports on the view objects.
- Fixed an issue with the AnimatorGraph asset when deserializing from Json (desync, exceptions).
- Fixed an issue with the computation of sphere-sphere collision penetration.
- Fixed an issue with the gizmos drawing of static spheres attached to GameObjects with scale different than 1.
- Fixed an issue with the mesh baking process that could cause FPVector3 overflows.
- Improved the experimental avoidance quality for agents that are moving around each other very slowly.
- Improved the experimental avoidance quality against non-moving agents by using truncated velocity obstacles.
- Improved the experimental avoidance performance by not generating velocity obstacles for non-moving agent that do not affect the path to the current target.
- Improved the experimental avoidance performance by inlining math.
- Added support to import Unity Offmesh links (Activated, AutoUpdatePositions and Navigation Area properties are ignored). ISignalOnNavMeshWaypointReached is called when reaching a link.
- Added a specific avoidance radius field to the agent configs to be able to use different radii for steering and for avoidance. When selecting the config file in the Editor the value will be initialized with the current agent radius.
- Added region selection to each individual NavMeshAgent that can be changed at run-time: `NavMeshAgent.SetNavMeshRegionActive(1UL << f.Map.GetNavMeshRegionIndex(“Gate001”), false);`
- Added Acceleration field to the NavMeshAgent that can be changed at run-time.
- Added experimental avoidance signals for customization purposes: ISignalOnNavMeshCanAvoid, ISignalOnNavMeshBeforeComputeAvoidance.
- Added an option to disable resetting the agent after OnTargetReached callbacks to prevent invalidating a potential call to SetTarget() during the callback (resetAgent parameter).
- Added an option (LineOfSightFunneling) to the navmesh agent config that tries to remove unnecessary waypoints from the funnel which sometimes occur in conjunction with active regions in the proximity.
- Added an option (WaypointDetectionDistance) to the navmesh agent config that improves the waypoint reached detection for fast-moving or slow-turning agents. For this feature an another additional waypoint (agent starting position) is cached in the navmesh agent.
- Added an option (NavMeshConstants.DebugGizmoSize) to change the navigation gizmo size.
- Added the UpdateInterval setting to the individual navmesh agent config and removing the global one from SimualtionConfig.
- Added mask and layer settings to navmesh agent config to fine-tune avoidance.
- Added Priority, AvoidanceLayer and AvoidanceMask to NavMeshAgent component to make the values changeable at run-time (initial values are set during Agent.Init()).
- Added an option to enable navmesh agent steering and avoidance callbacks individually: SimulationConfig.Agent.EnableCallbacks is split into EnableSteeringCallbacks and EnableAvoidanceCallbacks.
- Added the Steering option `Callback` on each NavMeshAgentConfig to explicitly enable the OnNavMeshUpdateSteering signal for this agent (IgnoreInternalSteering still has to be set). Make sure Agent.CurrentVelocity is always set even if the agent movement is not desired (see the Move By setting).
- Added support to sphere-triangle collision detection when sphere is behind triangle plane.
- Added mesh triangle index info to DynamicHit3D.
- Added FPMatrix4x4 math class to the PhotonDeterministic library.
- Added Transform3D utility math methods.
- Added FPQuaternion.AsEuler (uses the same order of rotations as Unity)
- Added support to offsetting the center of mass on 2D and 3D Dynamic Bodies.
- Added a `Use Manifold Normal` option to 2D and 3D KCC config assets and an optional parameter to kcc methods in order to choose between using the default normal computation or the one from the overlap manifold.
- Added support to minimum linear velocity integration on the 3D Physics. Use the existing 'SimulationConfig.Physics.MinLinearIntegration' field to enable it.
- Added debug log information on exceptions during asset loading.
- Added a utility method to the NavMesh class that helps to move an agent out of invalid navmesh area (MovePositionIntoNavmesh.
- Made NavMesh.FindTriangle() method to get a triangle index at a position public.
- Deprecated FPQuaternion.EulerAngles (for using different order of rotations than Unity)
- Changed MapNavMeshBaker.BakeNavMesh() to accept a parameter object (MapNavMeshBakeData) instead of an MapNavMeshDefinition instance to make it possible to input custom navmesh data without creating a Unity object. Use MapNavMeshDefinition.CreateBakeData() to create a parameter object from the definition.
- Removed UsePhyics option in NavmeshAgentConfig and replaced it with Move Agent By setting. In this manner the movement done by the agent can also be set no do nothing which helps with driving the agent in a custom way.
- Removed useless allocations in the OnInputConfirmed callback.

# 1.2.4.1

## F1 (Stable) (Feb 27, 2020)

- Fixed issues with box-triangle intersection check that was causing collisions to be missed when they were aligned or the triangle was inside the box.
- Fixed an issue with box-triangle collision points calculation that was causing some points to be missed.
- Fixed an issue with the penetration calculation of box-triangle intersection.
- Fixed an issue that clock alias interpolating was not applied to entities with 3D transforms.
- Fixed an issue with the CharacterController3D that caused hits being detected before landing and so making it float instead of being grounded.
- Fixed an issue with the contact point position during triangle-sphere 3D narrow phase detection.
- Fixed an issue with the normal calculation of circle-polygon intersection.
- Fixed an issue with the editor drawer of 2D static colliders that did not take the object rotation into account.
- Fixed CharacterController 2D and 3D configs typos (Config.Braking).
- Fixed physics layer matrix drawing in the SimulationConfig Unity version 2018.3 and newer.

# 1.2.4

**Major Features:**

Filters: it is now possible to define custom entity filters in the DSL files. Filters will result in iterators over active entities that match the desired composition of components.

**Breaking Changes:**

A NavMesh re-import and re-bake is required for all existing navmesh assets due to internal changes to data structures.

A Map re-bake is required because of new data structures used for 3D physics.

Extended the signature of NavMesh methods by INavMeshRegionMask which is implemented by the Frame class.

Removed NavMeshAgentConfig.ProximityFactor and replaced it with an absolute AvoidanceRange.

Changed the signature of the QuantumGameCallbacks.InputConfirmedDelegate to remove allocation. The allocation will still occur when input recording is enabled.

**Known Issues:**

If using 3D physics on mobile platforms, these are the minimum Unity and runtime versions required:

- IL2CPP builds: Unity 2017.2 and up.
- Mono builds: Unity 2018.1+ and runtime 4.x (3D physics will fail with 3.5 mobile mono builds).

Re-bake all maps to correctly initialize new data structures.

## F1 (Stable) (Dec 13, 2019)

- **Breaking Change:** Re-baking all NavMeshes is required.
- Fixed an issue with NavMeshAgent.SetTarget() when the target position is exactly lying on a triangle edge.
- Fixed an issue with validating NavMeshAgent start and target positions when using regions and multiple navmeshes in one map.
- Fixed a StackOverflowException during the AOT file generation when having valid circular dependencies of types in Quantum assets (e.g. Buff references another Buff).
- Fixed processing List<> fields in AOT file generation.
- Fixed an issue in EntityPreviewUpdater that caused exceptions when Prefab is set to null.
- Fixed an issue when baking Quantum Animations using the Exit state which is now replaced by the default state.
- Fixed an issue with 3D BoxBox narrow phase collision checks that would ignore the collision if one box would be fully inside the other.
- Fixed an issue that would cause 3D manifolds initial pool to be empty (would allocate on first use fine).
- Fixed an issue with 3D Shape Overlaps where normals where not always pointing towards the shape being tested.
- Changed Quantum animation baking to stop and throw an error when detecting states without a motion clip.
- Changed NavMeshAgent.MaxSpeed to be public which can be used to change the agent speed at run-time.
- Disabled 0414 warnings from CodeGen.Gen.cs.
- Added Forward, Back, Up, Down, Left, Right property getters to Transform2D and Transform3D.
- Fixed some UI issues and warnings with Unity 2019.3.

## RC2 (Nov 19, 2019)

- Fixed an issue with 3D box-box collision detection with aligned rotations in which the normal would be the zero-vector.
- Fixed an issue with KCC ComputeRawMovement() in which the penetration value would be passed as a negative number on callbacks.
- Fixed an issue with the 2D contact point calculation during OverlapShape() when using a circle against a rotated polygon.
- Fixed an issue with dynamic bodies (2D and 3D) that are set to kinematic (InitKinematic) during user collision callbacks.
- Fixed an issue that caused the navmesh steering callbacks to be executed while SimulationConfig.NavMeshAgent.EnableCallbacks was toggled off.
- Fixed an issue with EntityPrefabViewUpdater.CreateEntityPrefabInstance() that was ignoring the y component when using QUANTUM_XY.
- Fixed DebugDraw.Rectangle() gizmo rendering for QUANTUM_XY.
- Fixed GizmoUtils.DrawGizmoPolygon2D() to correctly draw polygon normals when the transform/matrix has scaling information. The normals of a QuantumStaticPolygonCollider2D are only drawn when the GameObject is selected.
- Added the automatic generation of QuantumAOT.cs (by the quantum.codegen.unity tool) which fixes issues when deserializing the DB under IL2CPP (check out the Asset Linking manual how to disable it).
- Added an optional QuantumRunner.StartGame signature (String, StartParameters) that uses StartParameters.PlayerCount and StartParameters.LocalPlayerCount to support multiple local players joining an online game.
- Added a virtual ApplyTransform() method to EntityPrefabRoot.cs so developers can override and apply their interpolation without modifying the original script.
- Added an info box in SimulationConfig inspector to warn about an active AutoLoadSceneFromMap toggle (when moving towards a custom way of starting the Quantum simulation this option can cause problems with reloading scenes that are tricky to debug).
- MapData is now saving references to the collider source scripts/GameObjects it used to bake Quantum colliders from. Associating source and baked data was only possible by changing the baking script.
- Changed the interpolation methods in EntityPrefabRoot.cs to use more verbose parameters and make EntityPrefabViewUpdater.cs follow this pattern: always use clock aliasing interpolation except during forced teleports, use error based interpolation only in online games.
- Changed internal methods in CustomEditorsHelper.cs to be public.
- Changed FPVector2.CalculatePolygonCentroid() so it will throw an ArgumentException instead of a DivideByZeroException when passing invalid polygons.
- Removed CommandSetup.cs from the upgrade packages.

## RC1 (Oct 30, 2019)

- Fixed an issue with KCC 3D that would cause glitches in triangle transitions and when moving into walls.
- Fixed an issue with KCC 2D that would cause glitches when moving into walls.
- Fixed an issue in which KCC 2D collisions with Polygon and Circle shapes could be ignored.
- Fixed KCC default steering (Move method) to better handle horizontal movement on controlled slopes.
- Fixed an issue with clamping 2D dynamic objects to a non-uniform grid.
- Fixed an issue that returned an inverted normal on 2D shape overlapping box vs. circle.
- Fixed an issue that caused the experimental avoidance being applied while UseLegacyAvoidance is toggled on.
- Fixed an interpolation issue when running in lockstep mode.
- Fixed NavMesh baking and gizmo rendering when using QUANTUM_XY (toggle NavMeshDefinition.EnableQuantum_XY).
- Fixed the grid gizmo rendering for non-uniform grid sizes and QUANTUM_XY.
- Fixed the gizmo rendering of the QUANTUM_XY 2D circle collider height.
- Fixed an issue that could cause an exception when displaying the Frame Differ.
- Updating the demo menu scene by deactivating all panels and setting the default player count to 4.
- Added Dynamic Shape Config 3D class (and custom drawer) to simplify DynamicBody3D data-driven initialization (equivalent to the 2D version).
- Added surface normal to 3D Raycast/Linecast (when this option is not disabled).
- Changed the upgrade/quantum_unity.zip file to also contain Unity meta files.

**Beta Status Disclaimer**

B2 was expected to be the last Beta version before moving to RC (release candidate) status. However, we decided to add one new feature and one internal refactoring that would break the semantics of an RC version (meaning we should keep changes to a minimum, focusing on bug-fixes only).

For this reason, B3 is being released as a short-term beta as a preview to the RC version. We expect to give access to the RC version in a short time.

## B3 (Beta) (Oct 22, 2019)

- **Breaking Change:** Removed unused data (Region) from the NavMeshVertex data structure. Please, re-bake all your maps.
- Added support for rectangular map sizes by replacing Gridsize with GridsizeX and GridsizeY. The original variable was kept to make sure serialized maps will load properly. Modifying X and Y directly overwrites the original single size.
- Added new Local game mode that does not incur in rollbacks (for testing purposes, the old behavior is now called LocalDebug).
- Added a public property to set Max Ticks Per Update in `Session` (replacing hard coded value of 180).
- Added a public property to set the QuitBehaviour in `QuantumNetworkCommunicator` (was private).
- Added a public property to set DeltaTimeType in `QuantumRunner` (was private).
- Added an option to prevent Session.Update() being called in QuantumRunner (OverrideUpdateSession).
- Added an option to improve the NavMesh baking time (`Generating Triangle Center Grid` in particular): Select SpiralOut as the `Closest Triangle Calculation` mode on the NavMesh inspector. As a consequence of using this option, starting and targeting position too far off the navmesh can result in No Path.
- Added a debug option to draw the raw triangle path in QuantumEditorSettings (only the last call to pathfinder is shown here).
- Added CharacterController3D and 2D default config files (included in the upgrade package and will be placed at Resources/DB/Configs/)
- Fixed a DivisionByZero exception during Linecast2D when the segment length is 0.
- Fixed a desync caused by 2D and 3D physics island detection in conjunction with multi-threading.
- Fixed a desync caused by 3D physics sleep detection in conjunction with snapshots from the server.
- Fixed issue with Map in which the first baked 3D static collider would not be added to the broadphase.
- Fixed an issue that caused a non-optimal initial time synchronisation due to extensive file loading during the OnGameStarted callback.
- Fixed an issue that causes the PUN wizard to pop up during upgrading the Unity project from 2018 to 2019.
- Fixed the grid gizmo drawing when using different dimensions.
- Fixed an OutOfBounds exception in NavMeshPathFinder.FindPath() when the starting triangle is invalid.
- Fixed a DivisionByZero exception in NavMeshAgent.UpdateDesiredVelocity() when delta time is set to 0.
- Fixed an issue that generated slightly bend paths close to active NavMesh regions. This requires the agent to be using the `Best` path quality.
- Fixed the “No path to funnel” error message.
- Fixed an issue where NavMeshPathFinder.PathSize was not reset when not finding a path.
- Fixed an issue where the Quantum NavMesh region script was not saving changes to the GameObject.
- Fixed issues that prevented the NavMesh baking to be executed properly during runtime.
- Fixed an issue there the NavMesh baker would throw an error when not using import from Unity.
- Fixed CharacterController2D/3D to prevent collide-with-self-entity from happening.
- Fixed an issue in which Exporting database would not copy all mesh binary files to target directory.
- Fixed issues with 2D and 3D Linecast/Raycast DDA implementations.
- Fixed a thread safety issue with 2D/3D overlap/cast when running simulation on server.
- Fixed an issue with accuracy of FPQuaternion.AngleAxis.
- Fixed an issue with 3D Raycast-Sphere in which spheres behind the line start could be added as a hit.
- Fixed an issue with collision counter on CharacterController2D/3D
- Fixed an issue in ray-edge collision checks.
- Fixed an issue with the new interpolator when instantiating new prefabs near the origin.
- Fixed an issue with different file ordering when loading DSL files in certain platforms would lead to inconsistent internal entity/component IDs (now sorting DSL files with localization prior to running the parser).
- Fixed an issue on the server plugin input replacements in which max-predict-distance would be observed in all situations.
- Fixed an issue in which server predicted inputs not correctly cloning data arrays could lead to desyncs on late joins.
- Improved Kinematic Character Controller 3D performance.
- Improved NavMeshAgent performance.
- Improved initial synchronized clock value to not be affected by scene loading, frame initialization and user callbacks.
- Improved broadphase initialization cell checks to reuse Manifolds from the pool, avoiding heap allocations.
- Improved internal handling of DeterministicConfig, now with Local and Global copies (devices can now run lockstep vs non-lockstep in same match).
- Removed the usage of Quantum.Log from map and navmesh baking scripts.
- Removed the spamming “Starting from tick” messages during snapshot reconnects.

## B2 (Beta) (Aug 13, 2019)

- **Breaking Change:** Changed the signature of the OnInputConfirmed callback again to unwrap the Tuple parameters.
- **Breaking Change:** Changed the data structure of the navmesh again. Re-bake all your navmeshes.
- **Breaking Change:** Changed the data structure the 3D collider inside the map. Re-bake all your maps.
- **Breaking Change:** Added an option to enable the navmesh callbacks. This is off by default. If you use any of the callbacks toggle SimulationConfig.NavMeshAgent.EnabledCallbacks.
- Fixed an exception in EntityPrefabRoot.UpdateFromTransform() that could be thrown when the simulation is catching up and the last frame predicted is outside the rollback window.
- Fixed a compilation error in the QuantumSimplerReplaySave script on platforms other than Standalone, Android and iOS.
- Fixed an edge case where the Navmesh agent would trigger a re-path when setting a target outside the grid every frame.
- Fixed an issue in Navmesg.FindClosestTriangle where in certain cases and adjacent triangle would be returned instead of the right one when point is inside navmesh.
- Fixed duplicated points inside the funneled NavMeshAgent.Path.
- Fixed map grid rendering for the QUANTUM_XY setting.
- Fixed an issue with ErrorCorrectionRateMin and ErrorCorrectionRateMax values on EntityPrefabRoot being off by a factor of ten.
- Fixed an issue with duplicate settings for some error correction parameters on the EntityPrefabRoot script.
- Fixed an issue with null ref being thrown inside EntitPrefabViewUpdater if unity GameObject was destroyed before the entity.
- Fixed allocation inside EntityPrefabViewUpdater when iterating over active prefabs.
- Fixed an issue with FPVector3.ToString() method that returned incorrect values shown in Visual Studio editor during debugging for example.
- Fixed an issue that recreated the PhotonServerSettings file during an upgrade from Unity 2018 to 2019 when the Library folder was deleted.
- Fixed an issue when detecting intersection between circle and segment (LineIntersectsCircleManifold)
- Fixed an issue where the EntityPrefabViewUpdater was instantiating a prefab at a truncated 3D position (noticeable on trail renderers).
- Fixed an issue where static collision callbacks with triangles and 2D edges could be duplicated in one tick (against the same static).
- Fixed an issue where the DB can cause a checksum error for different system locale.
- Added an option to enable multithreading for NavMesh agent steering, avoidance and pathfinding (SimulationConfig.NavMeshAgent.IsMultithreaded). Be careful when using this with navigation callbacks as only the local entity can be modified during the callback.
- Added an option to toggle the grid rendering: MapData.DrawGridMode and change its color: QuantumEditorSettings.GridColor.
- Added DrawGizmoVector()/Diamond() methods to GizmoUtils.
- Added AngleBetween() method to FPMath to simplify computing the angle delta between two unwrapped angles.
- Added ‘ErrorPositionMinCorrection’ value to EntityPrefabRoot to allow controlling the smallest error correction that can be applied.
- Added navmesh region normals that will result in nicer paths around deactivated regions.
- Added an option to keep the agent inside the navmesh using non-physics based experimental avoidance: `ClampAgentToNavmesh`.
- Changed agent priority of experiential avoidance to work identically to the original avoidance: greater value = higher priority.
- Added Nintendo Switch CustomAuthenticationType enum value.
- Updated the StaticPolygonCollider2D editor to make deleting and creating vertices zoomed out possible. Use `shift` and `control` to display the buttons.
- Added the 2D version of the Kinematic Character Controller (CharacterController2D) component, including pre-build steering and jumping, or optional raw callbacks.
- Added a helper that deletes nested assets to the Unity AssetDatabaseExtensions scripts (DeleteAllNestedAssets).
- Added canceled/confirmed callbacks to non-synced events (into QuantumGame.Callbacks).
- Improved 3D math performance by inlining FPQuaternion.
- Named the Photon server plugin “QuantumPlugin”. Add this to RoomOptions.Plugins when connecting via PUN. This will give better feedback when trying to connect to an AppId without activated plugin.
- Removing allocations in QuantumGame.PlayerIsLocal() by writing out the Linq function.

## B1 (Beta) (July 17, 2019)

- Fixed compilation errors in the quantum.systems project when compiling with higher .Net versions. #83

ECS internals:

- Changed internal entity management meta-data to a double linked list. Now entity Create/Destroy are guaranteed optimal O(1) asymptotic performance, while iterators (including filters) are guaranteed optimal O(n) asymptotic performance (where n is the number of active matching entities).

Physics:

- Added friction and bounciness combine functions to physics material asset (legacy, max, min, average and multiply). #91
- Added option to Map to export 2D static polygon colliders as individual edges (better collision performance). #75
- Added relative point to AddForce and a new AddTorque method to DynamicBody3D.
- Added Unity Terrain exporter to 3D Physics. #75
- Added StaticMeshCollider3D for static meshes to be exported to Map; #75
- Added a Kinematic Character Controller (KCC) component, including pre-build steering and jumping, or optional raw callbacks.
- Added [Serializable] attribute to Transform2D and Transform3D components.
- Added static collider getters to Map.cs.
- Added FirstHitOnly to DynamicScene3D.LinecastOptions (this optimizes long raycasts/linecasts when only the first hit is needed).
- Fixed an issue with inverted normals on type-safe collision callbacks due to C# lambdas used on reciprocal narrow phase check functions. # 87
- Fixed an issue with DynamicHits/DynamicHits3D.Sort() method that was allocating data on heap (replaced Array.Sort with a custom quicksort).

Navmesh:

- Fixed a bug that could lead to strange waypoints due to vertex normals not being generated correctly.
- Fixed a bug that could lead to bad paths due to borders generated in wrong places when using Unity navmesh import.
- Fixed an issue with loading the binary navmesh file with an empty DB AssetPath on Standalone
- Optimized the navmesh import and baking performance.
- Added dynamically toggleable navmesh regions.
- Added a funneling step after finding a path to improve the visual path quality (see NavmeshAgentConfig.PathQuality).
- Added a LineOfSight method that generates the closest hit position (towards p0).
- Added another FindClosestTriangle method that searches surrounding grid cells for a closest position *on* the navmesh.
- Added run-time debug rendering of the Quantum navmesh (see QuantumEditorSettings.DrawNavMesh).
- Added a callback when the agent cannot find a path (see INavMeshCallbacks.OnSeachFailed). The agent gets automatically deactivated when this happens.
- The navmesh definition GameObject translation will now affect the baking of the navmesh triangle positions and the rendering gizmo.

Navmesh Agent:

- Removed UpdateInterval from NavMeshSteeringData, instead get the value from Frame.SimulationConfig.NavMeshAgent.UpdateInterval.
- Fixed a bug that could lead to overshooting the angular rotation when agent avoidance was kicking in causing the agents looking direction to jitter.
- Fixed a bug that could make the agent go faster than its max speed for one frame.
- Improved the generation of the fallback triangle cell lookup.
- Fixed the math how agents avoidance force is applied: now added to the desired velocity of the agents and also influences its speed.
- Added NavMeshAgent.InternalTarget which is the corrected Target position (to prevent triggering a repath when setting the same target every tick when the target is corrected).
- Added an optional border check when validating agent targets outside the navmesh which is more accurate than the default validation:  NavMeshAgentConfig.FindValidTargetCellRange. Range 1 will evaluate all cells surrounding the origin position for example.
- Exposed agent repath timeout value. Repathing is forced between waypoints in this interval: NavMeshAgentConfig.MaxRepathTimeout (seconds).
- Added the option to disable breaking on waypoints (NavMeshAgentConfig.BreakingOnWaypoint).
- Added an experimental new agent avoidance system which requires more computations but yields much better visual results (toggle off SimulationConfig.UseLegacyAvoidance to test). The agent priority is flipped for this setting and works similar to Unitys priority (lower value -> higher priority).
- Added a public getter for Waypoints.
- Added NavMeshAgent.Init(config) method. Use this when creating the agent instead of just assigning the config.
- Added AgentConfig parameter LineOfSightWaypointRange to enable LineOfSight checks when getting close to a waypoint. This helps in some cases if many agents tend to clutter around waypoints.

Unity:

- Fixed rendering of physics layers on the SimulationConfig inspector for Unity 2018.3+
- Fixed the radius of DebugDraw Circle and Sphere gizmo rendering (was always drawing half the size).
- Added a new error-based interpolator to EntityPrefabRoot. #98
- Added two ways to disable the Quantum AssetBaseEditor (to enable custom or third-party editor code): QuantumEditorSettings.Instance.UseQuantumAssetInspector (soft), scripting define DISABLE_QUANTUM_ASSET_INSPECTOR (hard)
- Added a data-driven quit behaviour to QuantumNetworkCommunicator.cs: decide between LeaveRoom (default), LeaveRoomAndBecomeInactive and Disconnect.
- Added a data-driven way to chose the client id when starting the game from the demo menus, instead of creating a new GUID every time (Qauntum.Examples.ClientIdProvider). Using the same id will result in getting the same Quantum player slot after reconnecting to a running session.
- Added another version number to Quantum SDK version showing the build number: 1.2.4.X
- Added import physics layers from 2D or 3D options to the SimulationConfig inspector. #84
- Added a Unity Editor menu entry to open the Quantum simulation (Assets/Open Quantum Project), change the sln-path in QuantumEditorSettings.QuantumProjectPath.
- Changed the usages of Photon.LeaveRoom() in the demo menus to always pass “false”, indicating to leave the room immediately, instead of becoming inactive.

Asset Generation:

- Fixed the menu order of generated asset scripts to be alphabetically on three layers Assets->Physics->NavMeshAgent for example. When adding a custom one you can use this `order = (X * 26 * 26) + (Y * 26) + (Z))` where XYZ are Quantum/**A**ssets/**P**hysics/**N**avMesh Agent Config alphabet positions (A = 0).
- Added an option to override the asset name shown in the Unity Editor create asset menu: [AssetObjectConfig(CustomCreateAssetMenuName=””)]
- Added an option to override the asset menu order in the Unity Editor create asset menu: [AssetObjectConfig(CustomCreateAssetMenuOrder=66)]
- Added an option to override the asset script generation destination folder by creating an app config file in the `tools\codegen_unity` folder (see Asset Linking manual).

# 1.2.3

**Breaking Changes:**
 
The way quantum emits array of primitive types defined in the DSL has changed.
It now emits a fixed size buffer public fixed Int32 IntegerDataProperty[8]; instead of the previous field list and array accessor method.

Added an option to enable and disable the 2D verticality feature completely: SimulationConfig.UseVerticalTransform. Default is false. #34

Changed the signature of custom steering callback data object to supply more information about the current state of the agent: replaced normalized Direction by Waypoint, 
added FP braking factor (based on turn angle for waypoint), added Boolean IsTarget (in case waypoint is agent target position).

## F3 (Stable) (Aug 08, 2019)

- Added optimized input encoding/decoding to improve server plugin scalability.
- Added commit hash and version number/suffix to pre-build DLL descriptions.
- Fixed an issue where the DB can cause a checksum error for different system locale.

## F2 (Stable) (Jun 04, 2019)

- Fixed an issue with the ComponentTypes enum when more than 32 component types were defined.

## F1 (Stable) (Apr 13, 2019)

- Fixed an exception in Unity Editor 2018.3 (AdvancedDropdown) while clicking the AddComponent button.
- Fixed the rendering of prediction culling debug gizmos when QUANTUM_XY is used.
- Fixed an issue with constant resolution for #pragma constants_class_name.
- Added region code "hk" (Hong Kong) to the CloudRegionCode enum.

## RC3 (Apr 02, 2019)

- Added lock protection around loading of statics (Layers, DB, LUT) to guarantee thread-safety when running simulation on server.
- Added thread-safe object pools to standalone instances of NavMeshPathFinder.
- Added new plugin callbacks for client input received (OnDeterministicInputReceived) and when generating input for non connected players (OnDeterministicServerInput).
- Changed physics engine integration to update position and rotation changes before applying drag to velocity.
- Fixed FPAnimationCurve to work with tangent mode in Unity 2018.1 and newer. The editor will convert deprecated Keyframe.TangetMode is it was used at all.
- Fixed issue on custom plugin sample where server simulation could lag behind clients (added adaptive delta time to the server session update).
- Fixed an issue with custom plugin sample that could break DB deserialization when multiple plugin versions were loaded on the same photon enterprise cluster (added custom type binder settings to JSON serialization).
- Fixed issue which would not allow a custom plugin to inject PlayerData for a non-connected player (can be done now).
- Fixed issue with local client input predictor that could cause desyncs under severe network conditions.
- Fixed issue with local client input predictor that would cause the Commands flag to be set on subsequent frames after a successful command was received.
- Fixed an issue in EntityPrefabViewUpdater that prevented the clock fix interpolation to be applied for 3D transforms.

## RC2 (Feb 06, 2019)

**Major Features:**

Replaced the _active boolean on entities with a _flags field instead, currently available flags are: Active, DestroyPending and Culled. 
The ‘IsActive’ property has been deprecated and marked as obsolete but retains its old behavior. You should instead use the new ‘Flags’ property to query the flags of an entity. 

When an entity is scheduled for destruction at the end of frame via a call to DestroyEntity() or Destroy*EntityType*() the DestroyPending flag will be set.

The GetAll*EntityType*() and GetAll*ComponentType*() methods will by default not return entities scheduled for destruction anymore. 
If your code depends on the old behavior of returning all entities you can set ‘#pragma legacy_entity_active_semantics 1’ in the DSL.

Implemented a prediction culling system for when quantum is running in ‘Expose Verified Status In Simulation’ mode.   
Prediction culling has to be explicitly enabled in the simulation config by toggling the `Use Prediction Area` setting on.

Prediction culling allows you to not run the prediction simulation for entities or parts of the simulation which are not inside an area that’s needed to provide 
an accurate visual representation of the game for the local client.

- Added a getter for EntityRef.Index.
- Added an option to use unscaled delta time when updating the simulation and renamed SimulationConfig.UseEngineDeltaTime to SimulationUpdateTime
- Added the [Flags] attribute to physics enumerations OverlapOptions and LinecastOptions.
- Added the FP version of ClosestPointOnTriangle (in FPCollision).
- Added the system callback ISignalOnNavMeshUpdateAvoidance to overwrite Quantum internal avoidance system.
- Added checks to session startup to make sure that you don’t create a quantum game with more player slots than configured in the DSL.
- Added mapping between Quantum player index and Photon actor id via the methods PlayerToActorId, ActorIdToFirstPlayer, ActorIdToAllPlayers on Frame.
- Added proper exception logging to plugin.
- Added Serialize() overloads for FP, FPVector2, FPVector3 and FPQuaternion to BitStream.
- Added prediction culling system when ‘Expose Verified Status In Simulation’ is enabled.
- Removed the _active boolean on Entity and replaced it with a _flags field instead.
- Added implicit cast operators from String and AssetObject to AssetLink.
- Fixed an issue in PUN 1.93 that caused the RTT values to not be set when running against a local server.
- Fixed an issue that caused a hiccup on late joining players during a buddy snaphost reconnect by adding the InitialTick parameter to the Join method.
- Fixed an issue that caused an exception in the Quantum state inspector.
- Fixed an issue in the NavMesh steering callback that could lead to stale data on the parameter object.
- Fixed an Unity 2018.1.* API compatibility issue (PrefabUtility.GetCorrespondingObjectFromSource).
- Fixed issue with code generation for bitsets with a size of less than 32.
- Fixed issue with constant resolution in #pragma definitions.
- Fixed issue in input deserialization on null or zero length predicted inputs which could cause more rollbacks than necessary.
- Fixed issue in plugin where the player slots count would be locked to the photon room size instead of pulling the value from the quantum configuration.
- Fixed an issue when quantum was running in local mode which would cause one input skips when calling SendPlayerData or SendCommand.
- Fixed an issue with Command serialization which would cause all commands to serialize all values to their defaults.
- Fixed an issue where EntityTypeSelector would throw exception on an invalid entity type string.
- Fixed an issue in the AutoMap scene that failed to start the game when only one MapAsset is found.

## RC1 (Jan 24, 2019)

- Upgraded PUN to version to 1.93 (this is required to support the raised size limits for RuntimePlayer and the new Deterministic Commands API). This version of PUN also adds official support for Unity 2018.3.
- Added DeterministicCommands API for easier communication from Unity into the Quantum simulation, see the online documentation for more details.
- Improved the serialization used for sending inputs from server to client making it much more bandwidth efficient.
- Input serializer now uses the same bit packing serialization as the game state serializer.
- Added #pragma auto_input_serializer 0 (DSL) which allows you to override the default input serializer by declaring a partial method called UserSerialize in the Input struct.
- Added the option of enabling fixed size input, this stops quantum from writing the size of the input data to the byte stream when sending input from server to client (DeterministicInput.FixedSizeInput).
- Added DeterministicSession.Resync to enable session recovery from a DeterministicFrame snapshot (requires the use of DeterministicSession.PrepareForResync to be called before the custom snapshot data is request).
- Added the system callback ISignalOnNavMeshUpdateSteering to overwrite the Quantum internal navmesh agent steering. See the "Navigation System" online documentation for more details. #60
- Added an option to use Unity.deltaTime to update the simulation (SimulationConfig.UseEngineDeltaTime). Activating this will make the simulation not catch up after pausing the Editor for example and it also can smooth out any view movement/animation you are drivin from the simulation callbacks.
- Changed the OnUpdateView callback invocation so it is guaranteed to be called every rendered frame. Under some circumstances it was omitted which could lead to stutters in the view rendering (see line above).
- Added inlining attribute to Quantum math function (only takes effect when the simulation runs in .Net, e.g. via the console-runner).
- Added an animation speed variable to the Quantum animator component to control the playback speed during run-time. Default speed is 1. #63
- Added the generation of a GetHashCode() method for the Input struct. #33
- Added a session getter to IDeterministicGame interface.
- Added shape overlap functionality to DynamicScene3D. #59
- Added normal vector computation to 2D OverlapShape() method. Opt out to save computation time by adding Core.DynamicScene.OverlapOptions.SkipNormal. #32 
- Added "immediate" parameter to Quantum.Runner.ShutdownAll() to delay the actual destruction of the session until Session.Update() has finished, which fixes errors that occur when calling this from a Quantum event for example. #42 
- Added a virtual Reset() method to the AssetBase class and generate Reset() code to automatically set a valid guid when creating new assets. #45
- Added a visual improvement to the AssetBaseEditor (Quantum Asset Inspector) to make Quantum asset data clearly distinguishable from Unity data on Quantum assets.
- Added a plus button to the AssetLinkDrawer when no asset is linked that creates a new asset file of the linked type in the DB root folder. #46
- Added an optional invoke order to the MapBake-callbacks: [MapDataBakerCallback(100)]. #44
- Added a new Unity scene (MenuAuto.unity) that utilizes the PUN utility script ConnectAndJoinRandom to automatically create, join a room and start the Quantum game. Caveat: sometimes simultanously started apps do not connect to the same room due to a known race-condition.
- Added focus on selected vertices function to the manual NavMesh editing tool (pressing F key).
- Added the NavMesh manual editing tool feature "Duplicate And Flip" to the undo stack.
- Added visual improvements to the NavMesh editor: drawing edges when "Toggle Draw Mesh" is active, added a progress bar to "Import From Unity".
- Added a toggle to the MapNavMeshDefinition script that optimizes the gizmo rendering performance (does not work when editing the NavMesh manually).
- When starting the simulation on a client from your own snapshot and sending InitialTick with the Join message, the server only sends you relevant inputs back.
- Fixed an issue with the internal job system that degraded performance on Android devices when using the physics multi-threading option. #36
- Fixed an issue when running the simulation on the server where shared broadphase data in the physics engine was causing interference between game instances. Broadphase data is now stored on the FrameContext.
- Fixed an issue that could cause errors on the client when the Join message is delayed or other messages are send during the Quantum game start routine.
- Fixed an issue that could corrupt the FPAnimationCurve drawer data when having multiple curve objects on one asset.
- Fixed the performance of map grid gizmo rendering.
- Fixed the "asset missing" label visibility that is shown on-top of AssetLinks in the Unity Inspector.
- Fixed issues with the Quantum Animator when using a 1D blend tree that imported false weights and could cause an divide-by-zero exception. #65
- Fixed an issue that would send non-optimal clock adjusting for late joins.
- Fixed an issue that reconnecting players did not get the same player id when using the same clientId during QuantumRunner.StartGame().
- Fixed an issue in the plugin that caused unnecessary input cancellations after snapshot-based reconnects.

# 1.2.2

**Breaking Changes:**

SimulationConfig, DefaultPhysicsMaterial and DefaultNavMeshAgentConfig are now part of the DB and can be attached to the RuntimeConfig.
Removed SimulationConfig parameter from QuantumRunner.StartParameters and from UnityDB.Init()
Removed obsolete properties from QuantumGame and moved the class outside of Unity to the quantum.systems project.
(If applicable) The QUANTUM_FLIP_EVENT_ORDER define needs to be added to the quantum.systems project.

See upgrade_instructions.txt and migration_notes.md for more details.

**Known Issues:**

Enabling multi-threading for physics might degrade performance on some Android devices. 
We advise to not use this setting on mobile platforms until we release the revised internal job system.

## Stable (Jan 15, 2019)

- Fixed an issue with 3D Linecast() not returning collision results with boxes.
- Fixed an issue that caused FPAnimationCurve.Evalute() to always return 0 when using Unity 2018.3 and IL2CPP.

## RC3 (Dec 20, 2018)

- Fixed an issue with the new input predictor from RC1 that could cause input desyncs.
- Fixed an issue in the server plugin that assigned a new player slot when reconnecting with the same client id.
- Fixed an issue in the server plugin that resulted in errors on the client during the session start routine when the join message is delayed.
- Fixed an issue where NavMesh.FindClosestTriangle() would always returns false when querying a valid navmesh position.
- Fixed an issue the could cause a null-reference exception in the collision code when destroying entities during a shape overlap test. #47
- Fixed an issue that could spam a warning log in AnimatorTransition and cause performance issues in the Editor.
- Fixed a compilation issue when using .Net 4.6 scripting runtime (Tuple).
- Fixed performance issues when editing larger NavMeshes in Unity by speeing up the gizmo drawing (Toggle Optimized Gizmos to acticate) and the Validate Navmesh calculations.  #51
- Changed the NavMesh gizmo drawing so it draws the outline too when the DrawMesh option is selected.

## RC2 (Nov 22, 2018)

- Fixed an issue where 2D raycasts were not returning hits when used in conjunction with 2D dynamic body verticality.
- Fixed an issue that could cause a crash when navmesh vertex count is greater than 4K.
- Fixed an issue where Quantum debug drawing did not render gizmos.
- Fixed an ArgumentException in the AssetLinkDrawer when an asset is missing while the guid is valid.
- Fixed an issue in EntityPrefabViewUpdater where entities are not created/updated when starting the game from a snapshot at not using AutoLoadSceneFromMap.
- Fixed an issue that caused NavMesh agents to rotate incorrectly when using a high angular velocity.
- Fixed an issue that could cause an exception when a QuantumCallbacks derived game object is disabled during the callbacks.

## RC1 (Nov 05, 2018)

- Added multi-threaded optimization to 2D and 3D Physics (see upgrade/features_1.2.2 for more information).
- Added resting (sleeping) body detection to 2D and 3D Physics. Optionally via island detection (seeupgrade/features_1.2.2 for more information).
- Added physics solver parameters to SimulationConfig (Penetration Allowance, Penetration Correction, Min Linear Integration).
- Added tangent impulse calculation (friction) to 2D physics even when UseAngularVelocity is set to false.
- Added scripts that implements turnkey "Instant Replays", "Killcam"-like game features.
- Added a new event action/callback that optionally passes the IDeterministicGame instance together with the event data (EventName.OnRaisedFromGame).
- Added a data structure and tooling for an one-dimensional deterministic animation curve (FPCurve).
- Added platform independent checksums.
- Added an option for replays to export a frame checksum list that can be verified during a re-run inside Unity or the console runner.
- Added Transform3D support to the EntityPrefabViewUpdater.
- Added correct Disposing of the DB.
- Added CreateBehaviour property to EntityPrefabRoot (Non-Verified, Verified) specifying from which frame the prefab instance life cycle is controlled.
- Added console.runner project to the quantum_code solution.
- Added running replay in a loop for the console.runner.
- Added optional checksum verification to the console.runner.
- Added configurable collider gizmo colors to the QuantumEditorSettings.
- Added new public FP constants EN1, EN2, ..
- Added Dispose() methods to DB, UnityDB and AssetBase classes.
- Added replacements for FPVector3.AsFPVector2 in form of XY(), XZ() and YZ().
- Added replacements for FPVector2.AsFPVector3 in form of XOY(), XYO() and OXY().
- Changed the 2D physics solver (reduced the jitter on 2D physics objects in some situations).
- Changed gravity parameter on SimulationConfig to be represented as an FPVector3. 
- Changed the scaling of the menu scene to be more visible on mobile devices.
- Changed NavMeshAgent behaviour to ignore acceleration when set to 0.
- Changed NavMeshAgent behaviour to ignore angular speed when set to0.
- Changed the input and replay recording API to be part of the QuantumGame class.
- Changed and marked QuantumInputRecorderStarter obsolete.
- Fixed an issue where the desync callbacks were not being called on checksum errors.
- Fixed an issue with QuantumNetworkCommunicator that could lead to unnecessary input replacements.
- Fixed an issue where SimulationConfig.Instance-getter would yield a broken asset after starting a second session.
- Fixed an issue in the EntityPrefabViewUpdater that destroys objects during rollbacks by iterating over the verified frame for creating/destroying prefabs.
- Fixed an issue the PlayerNotPresent flag was not used on client disconnects.
- Fixed an issue with recording incomplete inputs (from other players) in the end of replay which could provoke a NullRefException.
- Fixed the issue that the FP.Epsilon constant was not being initialized correctly.
- Fixed an issue with the AssetBaseEditor that hid fields on partial asset classes.
- Fixed an issue with the SimulationConfigEditor that failed to display the LayerMatrix for newer Unity versions.
- Fixed an issue that could cause the lockstep simulation to never stop stalling.
- Fixed an issue with snapshop-based late joins that caused the client to go though more input then necessary.
- Fixed an issue that caused NullReferenceExceptions when the NavMesh border count was > 2048 (supporting 16K now).
- Fixed an issue with too small buffer sizes when s huge state is send during a snaphost reconnect.
- Fixed an issue with the input prediction when could yield non optimal result during rollbacks (especially for Buttons).
- Removed quantum_code/quantum.systems/Systems/Core/PhysicsSystemPost.cs
- Removed quantum_unity/Assets/Quantum/QuantumGame.cs
- Removed quantum_unity/Assets/Quantum/QuantumGame.EventDispatcher.cs
- Removed quantum_unity/Assets/Quantum/Replay/QuantumInputRecorder.cs
- Removed quantum_unity/Assets/Quantum/Replay/ReplayTools.cs
- Removed quantum_code/quantum.systems/Replay/ReplayDeterministicGame.cs
- Removed quantum_code/quantum.systems/Replay/ReplayDeterministicGame.EventDispatcher.cs

# 1.2.1

**Breaking Change:**

Quantum navmeshes baked before 1.2.1 are not compatible and need to be re-baked.

DSL: Generated entity fields under the *fields* tag are now nested inside an struct called Fields.
In some scenarios access to these fields needs to be changed. See migration_notes.txt for more details.

- Removed RttBias, SoftTolerance and InputDelay from DeterminsticSessionConfig.
- Added the following settings to DeterministicSessionConfig to control local player input offset calculation: Input Offset Min, Input Offset Max, Input Offset Ping Start.
- Added support for enum base types to .qtn files.
- Added replays (see upgrade/replay_notes.md for more information)
- Added custom serialization to all code generated classes to prepare optional snapshot-based reconnects.
- Added support for converting Unity navmeshes into a Quantum navmesh including tools to handle workflow with NavMeshSurfaces.
- Added the undo feature to the Quantum navmesh editor.
- Added a CustomEditor for all Quantum Assets (derived from AssetBase) to omit the Settings variable foldout.
- Added a CustomEditor for the SimulationConfig and integrated the physics layers into it.
- Added an additional callback to the map baking process that is called before in order to be able to chain navmesh generation into the workflow (MapDataBakerCallback.OnBeforeBake).
- Added a shortcut to execute refreshing the database (Ctrl+Shift+D).
- Added an alphabetic order value to the CreateAssetMenu attributes of the generated Unity asset scripts.
- Added a tool for editing 2D polygon colliders.
- Added normal generation to DynamicScene.Raycast() method for circle, box and polgon intersections.
- Added entity Quantum state inspection by creating a custom inspector for EntityPrefabRoot.
- Added a new ScritableObject that makes the Quantum DB path customizable (QuantumEditorSettings).
- Protocol compatibility is now checked via the assembly attribute DeterministicProtocolVersion of the used PhotonDeterministic.dll.
- Fixed an issue that caused unexpected game play behaviour when creating entites with phyics during collision callbacks. All callbacks and triggers are now deferred and called after the complete manifold generation is complete.
- Fixed an issue in the navmesh baking process that could cause border edges to me missing.
- Fixed an issue in the navmesh baking process that could result in a non optimal grid-triangle lookup table.
- Fixed API methods Map.CalculateNodeGridXZ(), Map.CalculateNodeGridIndex() and NavMesh.FindClosestTriangle() to return and use correct grid indecies.
- Fixed an issue that caused a NullReferenceException in the map class caused by an uninitialized StaticColliders3D array.
- Fixed an issue where 3D static colliders could overwrite each other during initialization.
- Fixed an issue with 3D raycast checks against boxes where hits were not generated.
- Fixed an issue with 3D raycast checks against spheres where contact points were calculated wrongly.
- Fixed an issue where the Agent code could throw an assertion when no path could be found.
- Fixed an issue where the Unity code generation tool would crash when a dependency could not be resolved.
- Fixed an issue where the number of local players joining a debug game was hard-coded to one.
- Fixed an issue that could cause a desync of physics object during rollbacks.
- Fixed an issue that would make frame dumps not respect CultureInfo.InvariantCulture.
- Fixed an issue with the PhysicsMaterial that although the freeze rotation feature was activated some rotation data was leaking into the AngularVelocity.
- Fixed Unity warnings originating from Quantum code.
- Fixed an issue with the pathfinder and navmesh agent code (seee Frame.NavMeshAgent.Waypoint3) that made the simulation drift after rollbacks or just caused the checksum to desync.
- Fixed the Room Wait Time parameter on DeterministicSessionConfig. It's actually used now, if you experience a high delay when entering the game, tune this down to 1.
- Fixed an issue with OOBB collision detection where some collisions where ignored.

# 1.2.0

**Breaking Change:**

The online session startup procedure changed. Now there's no need to set RuntimePlayer object in advance (RuntimeConfig doesn't have a Players array anymore).
RuntimePlayer instances for the local players may now be set assynchronously at runtime as long as there's a deterministic session running.
See migration_notes.txt on the upgrade folder for more details.

Important: The network protocol of 1.2.0 is incompatible with previous versions. This means
you have to update your backend plugin after you've upgraded to client SDK 1.2.0.

- Added new static function QuantumGame.SetPlayerData(Int32 playerIndex, RuntimePlayer data) to inject custom player data assynchronously during session runtime.
- Added new signal ISignalOnPlayerDataSet to receive custom data from RuntimePlayer object.
- Added [2.5D physics] vertical properties (height and vertical offset) to the scripts for 2D physics static colliders and debug gizmos.
- Added [2.5D physics] new overloads to Raycast/Linecast/OverlapShape with height and/or vertical offset parameters.
- Added prefab instance highlighting to the Fixed Point custom drawer.
- Added [Experimental] basic 3D physics (Transform3D and DynamicBody3D Components, raycasting static tooling for 3D sphere and box colliders and gizmos). Warning: not optimized code, so performance should not be expected.
- Added runtime version checking between client SDK and photon server plugin when creating/joining a session.
- Improved memory use for static broadphase data (physics 2D, physics 3D and navmesh agents).
- Fixed an issue where dynamic box or polygon collision could cause a desync because of stale runtime data during predict/rollbacks.
- Fixed an issue in the polygon-polygon collision code that could result in faulty penetration calculation.
- Fixed an issue with OverlapShape throwing an exception when used with a polygon collider.
- Fixed 2D physics gizmos rotation when using QUANTUM_XY on Unity.
- Fixed an issue that made the Asset Types generation fail when the target directory is missing.
- Fixed an issue when removing a data asset class would cause the Unity project to not compile and not be able to re-generate asset scripts (this step is now done by a new executable tool which is run from outside Unity when quantum.systems is compiled)

# 1.1.8 hotfix

- Added the option to flip the event invoke order, define QUANTUM_FLIP_EVENT_ORDER in the unity Script Define Symbols and the events will be invoked in the order they are raised.
- Fixed an issue with events raised in OnInit and OnEnable during startup were not invoked.
- Fixed an issue in background thread mode where you could sometimes miss event callbacks and verified frames if the game was running too slow.
- Fixed an issue where dynamic box or polygon collision could cause a desync because of stale runtime data during predict/rollbacks.
- Fixed an issue in the polygon-polygon collision code that could result in faulty penetration calculation.

# 1.1.8

**Breaking Change**

The Quantum.EntityTypes enum is now 1-indexed instead of 0-indexed, this is done so that
default(EntityRef) does not resolve to a valid entity. Most likely this will not affect anyone
but if you had a Quantum.EntityTypes enum field on a MonoBehaviour or other asset serialized in
Unity it will no longer have the correct value.

- Lowered memory usage of physics engine and navmesh.
- Improved error message when adding an asset with duplicate guids during runtime.
- Improved accuracy of initial clock synchronization during game startup.
- NavMeshAgent avoidance now influences agent rotation.
- Type specific EntityRef's now throw a System.InvalidCastException instead of System.Exception upon casting error.
- DynamicCollisionInfo and StaticCollisionInfo now exposes a property called 'IgnoreCollision' which if set to true in a collision callback will cause the collision to be ignored during impulse resolution.
- Added 'asset import <SubClassAsset>' syntax for importing non root-assets into the DSL.
- Added NavMeshAgent debug draw configuration option.
- Fixed an issue in the code generator where an asset_ref<T> that was only used inside an array would not get generated.
- Fixed an issue with the IL patcher where it would not be possible to debug-step into the quantum.state dll.
- Fixed an issue where casting default(EntityRef) to an type-specific entity ref would throw an exception.
- Fixed an issue inside of the code generator relating to the type safe collision signals that would lead to a compile error.

# 1.1.7

Important: The network protocol of 1.1.7 is incompatible with previous versions. This means
you have to update your backend plugin after you've upgraded to 1.1.7.

- Added built in NavMeshAgent component.
- Added support for statically typed collision signals for entities.
- Added support for time dilation in the client to slow down time if one of the clients cant keep up (off by default).
- Added Transform2DVertical component (extrusion-based 3D collision checks for the 2D physics engine - bodies may have height and vertical position - collisions are solved in 2D space);
- Implement IEnumerable<T> to DynamicHits and Buffer<T> classes to allow iteration using linq/foreach.
- Fixed a bug with iOS builds where the memcpy reference for Nintendo Switch would be included causing build errors.

# 1.1.6

Important: You must have upgraded your project and server plugin to 1.1.4 before applying the 1.1.6 upgrade.

**New Platform:**

Quantum now supports Nintendo Switch.

**Breaking Change:**

GridSize and GridNodeSize on the map asset have both been restricted with the following checks:
- Has to be an even number
- Has to be greater than or equal to 2

- Removed all calls to Quantum.Profiler from internal code.
- Added DB.AddAsset(Frame f, AssetObject asset) to allow adding assets to the database during runtime.
- Added OverlapShape which allows you to perform overlaps using an arbitrary physics shape.
- Added Frame.EntityExists method to check if an EntityRef is valid
- Added Frame.<EntityType>Exists methods to check if an <EntityType>EntityRef is valid.
- Added NullableFPVector2 and NullableFPVector3.
- Added FPVector2.MoveTowards and FPVector3.MoveTowards
- Added EntityRef.None field to ease clearing out entity refs.
- Added <EntityType>EntityRef.None field to ease clearing out entity refs for a specific entity type.
- Added EntityPrefabRoot.EntityRef field to make it easier to access an entity from an instantiated prefab.
- Added #pragma warning disable for the empty switch warning in the generated code.
- Nullable FP, FPVector2 and FPVector3 are now usable from the DSL by default. Use FP?, FPVector2? and FPVector3?.
- EntityRef now implements == and != operators.
- <EntityType>EntityRef now implements == and != operators.
- <EntityType>EntityRef now overrides Equals(Object obj).
- <EntityType>EntityRef now implements the IEquatable<T> interface.
- Fixed issue with lexer not parsing negative numbers correctly.
- Fixed issue in FPVector3.Lerp where it would pass clamp arguments in the wrong order.
- Fixed issue with 64bit iOS 11.0+ builds.

# 1.1.5

**Important:** 

You must have upgraded your project and server plugin to 1.1.4 before applying the 1.1.5 upgrade.

**Breaking Change:**

The collision signal API has been reworked, we now provide four signal interfaces:

ISignalOnCollisionDynamic
ISignalOnCollisionStatic
ISignalOnTriggerDynamic
ISignalOnTriggerStatic

Any code that previously used the ISignalOnCollision interface needs to be updated to 
use either ISignalOnCollisionDynamic or ISignalOnCollisionStatic instead.

**Breaking Change:**

StaticTriggerData struct has been renamed to StaticColliderData.

**Breaking Change:**

In the inspector for the quantum static colliders in Unity the field named 'Trigger Asset' has been renamed to 
just 'Asset' as it's now available for non-trigger collisions with static colliders also.

**Breaking Change:**

Trigger callbacks are now invoked for these cases also:

* Static Collider <> Kinematic Trigger
* Kinematic Collider <> Static Trigger
* Kinematic Collider <> Kinematic Trigger

- Added ability to define constants in .qtn files with the '#define <name> <value>' syntax. Currently only integer constants are supported.
- Added StaticColliderData to DynamicHit struct to provide access to information about the static collider you hit with a raycast or overlap.
- Added StaticColliderData.ColliderId so each static collider can be uniquely identified during runtime.
- Added StaticColliderData.IsTrigger to allow for checking if a static collider is a trigger or not in a trigger callback.
- Added OnEntityCreated and EntityDestroy signal which are invoked whenever an entity is created or destroyed.
- Added On<EntityType>Created and On<EntityType>Destroy signal which are invoked whenever an entity of <EntityType> is created or destroyed.
- Added setting 'Expose Verified Status In Simulation' which allows you to query the Frame.IsVerified and Frame.IsPredicted state inside the simulation.
- Deprecated DynamicHit.entity and DynamicHit.point, use DynamicHit.Entity and DynamicHit.Point instead.
- Implemented proper GetHashCode methods for generated types to reduce hash collisions in event system.
- Improved the event dispatcher on the Unity side to reduce hash collisions.
- Improved performance of signal callbacks.
- Improved performance of array methods.
- Removed obsolete DynamicBody.InitStatic methods, use the new DynamicBody.InitKinematic methods instead.
- Removed obsolete AssetLink.Asset property, use the new AssetLink.Instance property instead.
- Fixed issues with 'Skip Rollbacks When Possible' setting, it should now work properly.
- Fixed issue with static collider broadphase init using too much CPU during runtime.
- Fixed issue with synced events being invoked multiple times in some cases.
- Fixed last remaining issues with QUANTUM_XY script define symbol.
- Fixed issue with transparency not being used with the Quantum.Draw methods.
- Fixed bug in polygon<>circle collision code.
- Fixed issue where signals with no arguments would generate invalid C#.
- Fixed issue where signals would be invoked on disabled systems.
- Fixed bug in generated IL code which would cause IL2CPP on iOS to not build.

# 1.1.4

**Important:** 

The network protocol of 1.1.4 is incompatible with previous versions. This means
you have to update your backend plugin after you've upgraded to 1.1.4.

- Massive physics performance improvements.
- Exposed DynamicBody.PhysicsMaterial property.
- Exposed DynamicBody.IsKinematic property.
- Exposed Replay API via the IDeterministicReplayProvider interface which can be set on the RuntimeConfig object.
- Removed the obsolete Frame.GameConfig property, use the Frame.RuntimeConfig property instead.
- Renamed DynamicBody.InitStatic to DynamicBody.InitKinematic, InitStatic is marked as obsolete.
- Added Quantum.LayerMask which mimics the behaviour of the LayerMask struct in Unity.
- Added ability to run the Quantum simulation in a background thread, currently marked as experimental.
- Added 'Aggressive Send Mode' to the quantum configuration options, see settings inspector for more details.
- Added #pragma syntax to DSL for setting compiler directives. 
- Added UnityDB.FindAsset<T>(AssetObject asset) to make it easier to get a unity asset from a quantum AssetObject.
- Added InitUser(), FreeUser(), AllocUser(), CopyFromUser(Frame frame) to allow easy extension of the Frame class from a partial user defined implementation.
- Added IEntityManifoldFilter which lets you filter collision manifolds for entities and disable collisions between certain entities.
- Fixed issue with lockstep input replication which could cause a lot of simulation stalling.
- Fixed issue with Polygon<>Box collisions causing them to not be calculated.
- Fixed issue with invalid input data throwing array out of range exceptions.
- Fixed issue with DynamicShapeConfig property drawer not having the correct height for 'None' and 'Box' collider types.
- Fixed issue where you could invoke methods on null pointers without getting a null reference exception.
- Fixed issue with not being able to create arrays out of asset_ref<T> types.
- Fixed issue in IL patcher where it would remove Assert calls for array accessor methods.
- Fixed issue where release mode dll's build with mono toolchain would make IL patcher produce invalid IL.
- Fixed issue with clock synchronizer which could lead to prediction count being high on some clients.
- Fixed issue with DeterministicInputFlags not being correct for input sets which were received before local client had simulated the frame for those inputs.
- Fixed memory leak in lockstep simulator caused by no input sets ever being recycled and re-used.
- Fixed issue where checksums callbacks would not be invoked when running with lockstep simulator.
- Fixed issue in network communicator call-order which could cause inputs to be delayed more than necessary.
- Fixed issue with input insertion when local input offset changed that could cause prediction spikes on remote clients.
- Fixed some issues related to switching quantum to the XY plane in unity with the QUANTUM_XY script define symbol.
- Fixed issue in code generator which allowed pointer types to be declared where not valid.
- Fixed issue in code generator which allowed the use of the nothashed keyword where not applicable.
- Fixed issue with importing animations that only has scale animation.
- Fixed null ref being thrown by the DB class when an asset link struct with a null guid was passed in.

# 1.1.3

- Added Lockstep mode that allows the quantum simulation to be run without rollbacks and predictions.
- Added [AssetObjectConfig] attribute to allow customization of the unity code generation for asset classes.
- Fixed issue where 'Rollback Window' setting was locked to the same as 'Simulation Rate'.
- Fixed issue in generated code that would cause a rare null-ref when calling GetEntity(EntityRef entity_ref)
- Fixed issue with MapDataBaker API where it would not always load the math lookup tables when in editor.
- Fixed array index out of range issue in NavMeshPathFinder that could occur in rare cases.
- Fixed issue with simulator that could in very rare cases hang client in an infinite loop.
- Fixed issue with animator not exporting speed parameter.
- Fixed issue with some transitions in animator not triggering.
- Fixed issue with 'Can Transition To Self' not being respected on Any State transitions in animator.
- Fixed potential null ref from QuantumRunner.OnDestroy call.
- Fixed issue with RuntimePlayer object order being incorrect compared to the PhotonPlayer order they were created for.

# 1.1.2

- Entities driven by physics are now clamped to the playable area.
- Added new type 'DynamicShapeConfig' which can be used inside quantum assets classes to setup a collider type that can later be used during runtime.
- Added new overloads for DynamicBody.InitDynamic and DynamicBody.InitStatic that take the new 'DynamicShapeConfig' as first parameter.
- Added DynamicBody.Enabled property to check enabled status of a body.
- Added AssetLink.Instance property, deprecated AssetLink.Asset property.
- Added support for root motion to animator. Mecanim AnimationControllers need to be reimported.
- Added "Local" game mode, which allows the Quantum to run locally with several players for games which require split screen, etc. 
- Added debug gizmos for dynamic colliders.
- Removed "Singleplayer" game mode, replaced with "Local" game mode with one player.
- Fixed some issues with the DeterminsticConfig asset inspector not allowing certain valid values to be set.
- Fixed issue with static broadphase for physics causing box colliders to not be added to broadphase correctly.
- Fixed issue with missing property drawer for AnimatorGraphLink struct.
- Fixed issue with missing property drawer for PolygonColliderLink struct.
- Fixed issue with static colliders not respecting their scale when they were baked to map data.
- Fixed issue with event dispatcher that could cause an infinite loop.
- Fixed issue with GetAll[ComponentName] method calls always returning a zero count.
- Fixed issue with the navmesh pathfinder sometimes causing allocations.

# 1.1.1

- Massive improvement in physics performance for static colliders.
- QuantumCallback method for map changing is now properly named OnMapChangeBegin.
- Entire MapData bake API is now usable during runtime.
- Implemented MapDataBakerCallback base class for easy extension of the map data baking API.
- Added FPBounds2 struct for 2D bounds calculations.
- Signals now include the Frame as the first parameter.
- Added RaiseCollisionEventsForStatics to physics settings to allow toggling of collision callbacks for static colliders.
- Added missing QuantumStaticColliderBox2D script for baking static box colliders.
- Added missing method DynamicBody.AddTorque.
- Added DynamicBody.AddAngularImpulse.
- Added DynamicBody.Enable, DynamicBody.Disable and DynamicBody.Destroy
- Added relative point parameter to DynamicBody.AddForce and DynamicBody.AddLinearImpulse.
- DynamicBody.IsTrigger is now public so it can be set from code.
- Improved performance of linecast and raycast against box colliders.
- Exposed QuantumGame.RuntimeConfig and QuantumGame.SimulationConfig as static properties.
- Exposed Frame.SimulationRate that holds the current update rate of the simulation.
- Deprecated Frame.GameConfig, use the new Frame.RuntimeConfig instead.
- Added QuantumGame.FrameInterpolationFactor which provides a normalized value to use for interpolating between the two latest predicted frame.
- Added position interpolation between frames to EntityPrefabViewUpdater.
- EntityPrefabViewUpdater now instantiates prefabs at the correct transform position.
- Added RNGSession.Next(FP min, FP max), RNGSession.Next(Int32 min, Int32 max) and RNGSession.HighPrecisionInteger(Int32 precision)
- Added temporary error log to FPVector2.Normalize to try to track down issue where the square magnitude of a vector turns into a negative value.
- Destroying entities are now deferred until all Systems have executed.
- Renamed Frame.EntityGet to Frame.GetEntity.
- Layer collision matrix is now imported from the Unity Physics settings.
- Fixed error spam when creating a new AnimatorGraph asset.
- Fixed a bug where layers would not be checked before collision was resolved for two bodies.
- Fixed a bug with baking static colliders that would invert their rotation.
- Fixed a bug with ToFPRotation2D extension method that inverted the rotation.
- Fixed a bug in the code generator related to complex array types.
- Fixed a bug in Animator updater where it would not use the correct delta time.
- Fixed a bug in DynamicScene.OverlapCircle causing it to always intersect all Box colliders.
- Fixed a bug where the Animation "Any State" was not working. Mecanim AnimationControllers need to be reimported.

# 1.1

- Initial ECS Release

# 1.0

- Initial Quantum Release

